// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "exampleProcessImageFilter.h"
#include "exampleProcessImageFilterPlugin.h"
#include "exampleProcessImageFilterToolBox.h" //the toolbox gui and functionality for the process

#include <dtkLog/dtkLog.h>

#include <medToolBoxFactory.h>  //To register the toolbox into the diffusion toolbox

// /////////////////////////////////////////////////////////////////
// exampleProcessImageFilterPluginPrivate
// /////////////////////////////////////////////////////////////////

class exampleProcessImageFilterPluginPrivate 
{
public:
    // Class variables go here.
};

// /////////////////////////////////////////////////////////////////
// exampleProcessImageFilterPlugin
// /////////////////////////////////////////////////////////////////

exampleProcessImageFilterPlugin::exampleProcessImageFilterPlugin(QObject *parent) : dtkPlugin(parent), d(new exampleProcessImageFilterPluginPrivate)
{

}

exampleProcessImageFilterPlugin::~exampleProcessImageFilterPlugin(void)
{
    delete d;

    d = NULL;
}

bool exampleProcessImageFilterPlugin::initialize(void) {

    //  Register the process

    if (!exampleProcessImageFilter::registered())
        dtkWarn() << "Unable to register exampleProcessImageFilter type";
    else
        dtkWarn() << "ABLE to register exampleProcessImageFilter type";

    //  Register the toolbox of the process with the Custon diffusionToolBox

    if (!medToolBoxFactory::instance()->registerCustomDiffusionToolBox("exampleProcessImageFilter", name(), description(), createExampleProcessImageFilterToolBox))
        qDebug() << "Unable to register exampleProcessImageFilter toolbox";
    else
        qDebug() << "ABLE to register exampleProcessImageFilter toolbox";

    return true;
}

bool exampleProcessImageFilterPlugin::uninitialize(void)
{
    return true;
}

QString exampleProcessImageFilterPlugin::name(void) const
{
    return "exampleProcessImageFilterPlugin";
}

QString exampleProcessImageFilterPlugin::description(void) const
{
    return "";
}

QStringList exampleProcessImageFilterPlugin::tags(void) const
{
    return QStringList();
}

QStringList exampleProcessImageFilterPlugin::types(void) const
{
    return QStringList() << "exampleProcessImageFilter";
}

Q_EXPORT_PLUGIN2(exampleProcessImageFilterPlugin, exampleProcessImageFilterPlugin)
