// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "v3dImage.h"

#include <dtkCore/dtkAbstractDataFactory.h>

#include <itkAnalyzeImageIOFactory.h>
#include <itkGDCMImageIOFactory.h>
#include <itkVTKImageIOFactory.h>

#include <vtkImageData.h>
#include <vtkMetaImageData.h>

// /////////////////////////////////////////////////////////////////
// v3dImagePrivate
// /////////////////////////////////////////////////////////////////

class v3dImagePrivate
{
public:
    vtkImageData *image;
};

// /////////////////////////////////////////////////////////////////
// v3dImage
// /////////////////////////////////////////////////////////////////

v3dImage::v3dImage(void) : dtkAbstractData(), d(new v3dImagePrivate)
{
    d->image = NULL;
}

v3dImage::~v3dImage(void)
{

}

bool v3dImage::registered(void)
{
    return dtkAbstractDataFactory::instance()->registerDataType("v3dImage", createV3dImage);
}

QString v3dImage::description(void) const
{
    return "v3dImage";
}

// /////////////////////////////////////////////////////////////////
// 
// /////////////////////////////////////////////////////////////////

bool v3dImage::read(QString file)
{
    if(dtkAbstractData::read(file))
        return true;

    vtkMetaImageData* metaimage = vtkMetaImageData::New();

    try {
        metaimage->Read(file.toAscii().constData());
    }
    catch (vtkErrorCode::ErrorIds &e)
    {
        qDebug() << "Error: cannot open file" << file.toAscii().constData();
    }

    d->image = metaimage->GetImageData();

    if(!d->image)
        return false;

    return true;
}

bool v3dImage::write(QString file)
{
    if(dtkAbstractData::write(file))
        return true;

    return false;
}

void v3dImage::setData(void *data)
{
    if(vtkImageData *image = dynamic_cast<vtkImageData*>((static_cast<vtkObject*>(data))))
        d->image = image;
}

void *v3dImage::data(void)
{
    return d->image;
}

// /////////////////////////////////////////////////////////////////
// Type instanciation
// /////////////////////////////////////////////////////////////////

dtkAbstractData *createV3dImage(void)
{
    return new v3dImage;
}

