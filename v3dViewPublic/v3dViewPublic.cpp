// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "v3dViewPublic.h"

#include <dtkCore/dtkAbstractViewFactory.h>
#include <dtkCore/dtkAbstractDataImage.h>

#include "vtkRenderer.h"
#include "vtkViewImage.h"
#include "vtkViewImage2D.h"
#include "vtkViewImage3D.h"
#include <vtkRenderer.h>
#include <vtkRenderWindow.h>
#include <vtkCamera.h>

#include <QVTKWidget.h>

// /////////////////////////////////////////////////////////////////
// v3dViewPublicPrivate
// /////////////////////////////////////////////////////////////////

class v3dViewPublicPrivate
{
public:
    vtkRenderer *renderer2DAxial;
    vtkRenderer *renderer2DSagittal;
    vtkRenderer *renderer2DCoronal;
    vtkRenderer *renderer3D;
    vtkViewImage2D *view2DAxial;
    vtkViewImage2D *view2DSagittal;
    vtkViewImage2D *view2DCoronal;
    vtkViewImage3D *view3D;
	
    vtkViewImage *currentView;	
	
    QWidget    *widget;	
    QVTKWidget *vtkWidget;	
	
    dtkAbstractData      *data;
	dtkAbstractDataImage *imageData;
	
    QSet<dtkAbstractView*> linkedViews;	
	
};

// /////////////////////////////////////////////////////////////////
// v3dViewPublic
// /////////////////////////////////////////////////////////////////

v3dViewPublic::v3dViewPublic(void) : dtkAbstractView(), d(new v3dViewPublicPrivate)
{
    d->data       = 0;
	d->imageData  = 0;
	
    d->renderer2DAxial = vtkRenderer::New();
    d->view2DAxial = vtkViewImage2D::New();    
    d->view2DAxial->SetRenderer(d->renderer2DAxial);
    d->view2DAxial->SetBackgroundColor(0.0, 0.0, 0.0);
    d->view2DAxial->SetLeftButtonInteractionStyle(vtkViewImage2D::ZOOM_INTERACTION);
    d->view2DAxial->SetMiddleButtonInteractionStyle(vtkViewImage2D::ZOOM_INTERACTION);
    d->view2DAxial->SetRightButtonInteractionStyle(vtkViewImage2D::NO_INTERACTION);
    d->view2DAxial->SetOrientation (vtkViewImage2D::AXIAL_ID);
    d->view2DAxial->CursorFollowMouseOff();
    d->view2DAxial->Show2DAxisOff();
    d->view2DAxial->SetScalarBarVisibility(0);
    d->view2DAxial->RulerWidgetVisibilityOn();

    d->renderer2DSagittal = vtkRenderer::New();
    d->view2DSagittal = vtkViewImage2D::New();    
    d->view2DSagittal->SetRenderer(d->renderer2DAxial);
    d->view2DSagittal->SetBackgroundColor(0.0, 0.0, 0.0);
    d->view2DSagittal->SetLeftButtonInteractionStyle(vtkViewImage2D::ZOOM_INTERACTION);
    d->view2DSagittal->SetMiddleButtonInteractionStyle(vtkViewImage2D::ZOOM_INTERACTION);
    d->view2DSagittal->SetRightButtonInteractionStyle(vtkViewImage2D::NO_INTERACTION);
    d->view2DSagittal->SetOrientation (vtkViewImage2D::SAGITTAL_ID);
    d->view2DSagittal->CursorFollowMouseOff();
    d->view2DSagittal->Show2DAxisOff();
    d->view2DSagittal->SetScalarBarVisibility(0);
    d->view2DSagittal->RulerWidgetVisibilityOn();

    d->renderer2DCoronal = vtkRenderer::New();
    d->view2DCoronal = vtkViewImage2D::New();    
    d->view2DCoronal->SetRenderer(d->renderer2DAxial);
    d->view2DCoronal->SetBackgroundColor(0.0, 0.0, 0.0);
    d->view2DCoronal->SetLeftButtonInteractionStyle(vtkViewImage2D::ZOOM_INTERACTION);
    d->view2DCoronal->SetMiddleButtonInteractionStyle(vtkViewImage2D::ZOOM_INTERACTION);
    d->view2DCoronal->SetRightButtonInteractionStyle(vtkViewImage2D::NO_INTERACTION);
    d->view2DCoronal->SetOrientation (vtkViewImage2D::CORONAL_ID);
    d->view2DCoronal->CursorFollowMouseOff();
    d->view2DCoronal->Show2DAxisOff();
    d->view2DCoronal->SetScalarBarVisibility(0);
    d->view2DCoronal->RulerWidgetVisibilityOn();
	
    d->currentView = d->view2DAxial;

    // Setting up 3D view
    d->renderer3D = vtkRenderer::New();
    d->renderer3D->GetActiveCamera()->SetPosition(0, -1, 0);
    d->renderer3D->GetActiveCamera()->SetViewUp(0, 0, 1);
    d->renderer3D->GetActiveCamera()->SetFocalPoint(0, 0, 0);
	
    d->view3D = vtkViewImage3D::New();
    d->view3D->SetRenderer(d->renderer3D);
    d->view3D->BoxWidgetVisibilityOff();
    d->view3D->SetCropping(0);
    d->view3D->SetScalarBarVisibility(0);
	double color[3] = {1.0,1.0,1.0};
    d->view3D->SetTextColor(color);
    d->view3D->ShadeOn();
	
	d->view2DAxial->AddChild( d->view2DSagittal );
	d->view2DAxial->AddChild( d->view2DCoronal );
	d->view2DAxial->AddChild( d->view3D );
	
    d->widget = new QWidget;

    d->vtkWidget = new QVTKWidget(d->widget);
    d->vtkWidget->setSizePolicy(QSizePolicy::Minimum, QSizePolicy::Minimum);
    d->vtkWidget->setFocusPolicy(Qt::NoFocus);
	
    vtkRenderWindow* renwin = vtkRenderWindow::New();
    renwin->StereoCapableWindowOn();
    renwin->SetStereoTypeToCrystalEyes();

    d->vtkWidget->SetRenderWindow(renwin);

    QVBoxLayout *layout = new QVBoxLayout(d->widget);
    layout->setContentsMargins(0, 0, 0, 0);
    layout->setSpacing(0);
    layout->addWidget(d->vtkWidget);
	
    //d->view3D->SetRenderWindow(d->vtkWidget->GetRenderWindow());
    d->view3D->SetRenderWindowInteractor(d->vtkWidget->GetRenderWindow()->GetInteractor());
    d->view3D->SetRenderWindow(d->vtkWidget->GetRenderWindow());
    d->view3D->UninitializeInteractor();
    d->vtkWidget->GetRenderWindow()->RemoveRenderer(d->renderer3D);
    
    //d->view2DCoronal->SetRenderWindow(d->vtkWidget->GetRenderWindow());
    d->view2DCoronal->SetRenderWindowInteractor(d->vtkWidget->GetRenderWindow()->GetInteractor());
    d->view2DCoronal->SetRenderWindow(d->vtkWidget->GetRenderWindow());
    d->vtkWidget->GetRenderWindow()->RemoveRenderer(d->renderer2DCoronal);
    d->view2DCoronal->UninitializeInteractor();
	
    //d->view2DSagittal->SetRenderWindow(d->vtkWidget->GetRenderWindow());
    d->view2DSagittal->SetRenderWindowInteractor(d->vtkWidget->GetRenderWindow()->GetInteractor());
    d->view2DSagittal->SetRenderWindow(d->vtkWidget->GetRenderWindow());
    d->vtkWidget->GetRenderWindow()->RemoveRenderer(d->renderer2DSagittal);
    d->view2DSagittal->UninitializeInteractor();
	
    d->view2DAxial->SetRenderWindow(d->vtkWidget->GetRenderWindow()); // set the interactor as well
    //d->view2DAxial->SetRenderWindowInteractor(d->vtkWidget->GetRenderWindow()->GetInteractor());
	
}

v3dViewPublic::~v3dViewPublic(void)
{
    d->vtkWidget->GetRenderWindow()->RemoveRenderer(d->renderer2DAxial);
    d->vtkWidget->GetRenderWindow()->RemoveRenderer(d->renderer2DCoronal);
    d->vtkWidget->GetRenderWindow()->RemoveRenderer(d->renderer2DSagittal);
    d->vtkWidget->GetRenderWindow()->RemoveRenderer(d->renderer3D);
	
    /*
	 d->view2D->SetRenderWindow(0);
	 d->view2D->SetRenderWindowInteractor(0);
	 d->view3D->SetRenderWindow(0);
	 d->view3D->SetRenderWindowInteractor(0);
	 */
	
    d->view2DAxial->Delete();
    d->view2DSagittal->Delete();
    d->view2DCoronal->Delete();
    d->renderer2DAxial->Delete();
    d->renderer2DSagittal->Delete();
    d->renderer2DCoronal->Delete();
    //d->view3D->UnInstallInteractor();
    d->view3D->Delete();
    d->renderer3D->Delete();
	
    delete d;
	
    d = NULL;
	
}

bool v3dViewPublic::registered(void)
{
    return dtkAbstractViewFactory::instance()->registerViewType("v3dViewPublic", createV3dViewPublic);
}

QString v3dViewPublic::description(void) const
{
    return "v3dViewPublic";
}

void v3dViewPublic::reset(void)
{
    d->view2DAxial->SyncReset();
}

void v3dViewPublic::update(void)
{
    if( d->currentView ) {
        d->currentView->Render();
    }
    d->vtkWidget->update();
}

void v3dViewPublic::link(dtkAbstractView *other)
{
    if(!other || other->description()!=tr("v3dViewPublic") || d->linkedViews.contains (other) || other==this)
        return;
	
    d->linkedViews.insert (other);
	
    if (v3dViewPublic *otherView = dynamic_cast<v3dViewPublic*>(other)) {
		
        //otherView->setProperty ("Linked", "true");
		d->view2DAxial->AddChild ( otherView->viewAxial() );
		d->view2DAxial->AddChild ( otherView->viewSagittal() );
		d->view2DAxial->AddChild ( otherView->viewCoronal() );
		d->view2DAxial->AddChild ( otherView->view3D() );		
		
		otherView->viewAxial()->SetCurrentPoint    ( d->currentView->GetCurrentPoint() );
		otherView->viewSagittal()->SetCurrentPoint ( d->currentView->GetCurrentPoint() );
		otherView->viewCoronal()->SetCurrentPoint  ( d->currentView->GetCurrentPoint() );
		otherView->view3D()->SetCurrentPoint       ( d->currentView->GetCurrentPoint() );
		
		d->view2DAxial->AddChild( otherView->viewAxial() );
		
		// zoom comes first, then pan (==translation)	
		otherView->viewAxial()->SetZoom ( d->view2DAxial->GetZoom() );
		//otherView->viewAxial()->SetPan  ( d->view2DAxial->GetPan() );
		
		otherView->viewSagittal()->SetZoom ( d->view2DSagittal->GetZoom() );
		//otherView->viewSagittal()->SetPan  ( d->view2DSagittal->GetPan() );	
		
		otherView->viewCoronal()->SetZoom ( d->view2DCoronal->GetZoom() );
		//otherView->viewCoronal()->SetPan  ( d->view2DCoronal->GetPan() );
	}
}

void v3dViewPublic::unlink(dtkAbstractView *other)
{
    if(!other || other->description()!=tr("v3dViewPublic") || !d->linkedViews.contains (other) ||  other==this)
        return;
	
    if (v3dViewPublic *otherView = dynamic_cast<v3dViewPublic*>(other)) {
		
		d->view2DAxial->RemoveChild ( otherView->viewAxial() );
		d->view2DAxial->RemoveChild ( otherView->viewSagittal() );
		d->view2DAxial->RemoveChild ( otherView->viewCoronal() );
		d->view2DAxial->RemoveChild ( otherView->view3D() );		
    }
	
    d->linkedViews.remove (other);    
}

void *v3dViewPublic::view(void)
{
    return d->currentView;
}

vtkViewImage2D *v3dViewPublic::viewAxial(void)
{
    return d->view2DAxial;
}

vtkViewImage2D *v3dViewPublic::viewCoronal(void)
{
    return d->view2DCoronal;
}

vtkViewImage2D *v3dViewPublic::viewSagittal(void)
{
    return d->view2DSagittal;
}

vtkViewImage3D *v3dViewPublic::view3D(void)
{
    return d->view3D;
}

void v3dViewPublic::setData(dtkAbstractData *data)
{
    if(!data)
        return;
	
#ifdef vtkINRIA3D_USE_ITK
    if (data->description()=="itkDataImageChar3") {
        if( itk::Image<char, 3>* image = dynamic_cast<itk::Image<char, 3>*>( (itk::Object*)( data->data() ) ) ) {
			d->view2DAxial->SetITKImage(image);
			d->view2DSagittal->SetITKImage(image);
			d->view2DCoronal->SetITKImage(image);
			d->view3D->SetITKImage(image);
		}
    }
    else if (data->description()=="itkDataImageUChar3") {
        if( itk::Image<unsigned char, 3>* image = dynamic_cast<itk::Image<unsigned char, 3>*>( (itk::Object*)( data->data() ) ) ) {
			d->view2DAxial->SetITKImage(image);
			d->view2DSagittal->SetITKImage(image);
			d->view2DCoronal->SetITKImage(image);
			d->view3D->SetITKImage(image);
		}
    }
    else if (data->description()=="itkDataImageShort3") {
        if( itk::Image<short, 3>* image = dynamic_cast<itk::Image<short, 3>*>( (itk::Object*)( data->data() ) ) ) {
			d->view2DAxial->SetITKImage(image);
			d->view2DSagittal->SetITKImage(image);
			d->view2DCoronal->SetITKImage(image);
			d->view3D->SetITKImage(image);
		}
    }
    else if (data->description()=="itkDataImageUShort3") {
        if( itk::Image<unsigned short, 3>* image = dynamic_cast<itk::Image<unsigned short, 3>*>( (itk::Object*)( data->data() ) ) ) {
			d->view2DAxial->SetITKImage(image);
			d->view2DSagittal->SetITKImage(image);
			d->view2DCoronal->SetITKImage(image);
			d->view3D->SetITKImage(image);
		}
    }
    else if (data->description()=="itkDataImageInt3") {
        if( itk::Image<int, 3>* image = dynamic_cast<itk::Image<int, 3>*>( (itk::Object*)( data->data() ) ) ) {
			d->view2DAxial->SetITKImage(image);
			d->view2DSagittal->SetITKImage(image);
			d->view2DCoronal->SetITKImage(image);
			d->view3D->SetITKImage(image);
		}
    }
    else if (data->description()=="itkDataImageUInt3") {
        if( itk::Image<unsigned int, 3>* image = dynamic_cast<itk::Image<unsigned int, 3>*>( (itk::Object*)( data->data() ) ) ) {
			d->view2DAxial->SetITKImage(image);
			d->view2DSagittal->SetITKImage(image);
			d->view2DCoronal->SetITKImage(image);
			d->view3D->SetITKImage(image);
		}
    }
    else if (data->description()=="itkDataImageLong3") {
        if( itk::Image<long, 3>* image = dynamic_cast<itk::Image<long, 3>*>( (itk::Object*)( data->data() ) ) ) {
			d->view2DAxial->SetITKImage(image);
			d->view2DSagittal->SetITKImage(image);
			d->view2DCoronal->SetITKImage(image);
			d->view3D->SetITKImage(image);
		}
    }
    else if (data->description()=="itkDataImageULong3") {
        if( itk::Image<unsigned long, 3>* image = dynamic_cast<itk::Image<unsigned long, 3>*>( (itk::Object*)( data->data() ) ) ) {
			d->view2DAxial->SetITKImage(image);
			d->view2DSagittal->SetITKImage(image);
			d->view2DCoronal->SetITKImage(image);
			d->view3D->SetITKImage(image);
		}
    }
    else if (data->description()=="itkDataImageFloat3") {
        if( itk::Image<float, 3>* image = dynamic_cast<itk::Image<float, 3>*>( (itk::Object*)( data->data() ) ) ) {
			d->view2DAxial->SetITKImage(image);
			d->view2DSagittal->SetITKImage(image);
			d->view2DCoronal->SetITKImage(image);
			d->view3D->SetITKImage(image);
		}
    }
    else if (data->description()=="itkDataImageDouble3") {
        if( itk::Image<double, 3>* image = dynamic_cast<itk::Image<double, 3>*>( (itk::Object*)( data->data() ) ) ) {
			d->view2DAxial->SetITKImage(image);
			d->view2DSagittal->SetITKImage(image);
			d->view2DCoronal->SetITKImage(image);
			d->view3D->SetITKImage(image);
		}
    }
    else if (data->description()=="itkDataImageRGB3") {
        if( itk::Image<itk::RGBPixel<unsigned char>, 3> *image = dynamic_cast<itk::Image<itk::RGBPixel<unsigned char>, 3>*>( (itk::Object*)( data->data() ) ) ) {
			d->view2DAxial->SetITKImage(image);
			d->view2DSagittal->SetITKImage(image);
			d->view2DCoronal->SetITKImage(image);
			d->view3D->SetITKImage(image);
		}
    }
    else if (data->description()=="itkDataImageVector3") {
        if( itk::Image<itk::Vector<unsigned char, 3>, 3> *image = dynamic_cast<itk::Image<itk::Vector<unsigned char, 3>, 3>*>( (itk::Object*)( data->data() ) ) ) {
			d->view2DAxial->SetITKImage(image);
			d->view2DSagittal->SetITKImage(image);
			d->view2DCoronal->SetITKImage(image);
			d->view3D->SetITKImage(image);
		}
    }
    else
#endif
		if (data->description()=="v3dDataImage") {
			if(vtkImageData *dataset = dynamic_cast<vtkImageData*>((vtkDataObject *)(data->data()))) {
				d->view2DAxial->SetImage(dataset);
				d->view2DSagittal->SetImage(dataset);
				d->view2DCoronal->SetImage(dataset);
				d->view3D->SetImage(dataset);
			}
		}
		else {
			dtkAbstractView::setData(data);
			return;
		}
    
    d->data = data;
	d->imageData = dynamic_cast<dtkAbstractDataImage*> (data);

	/*
    if (data->hasMetaData("PatientName")){
        const QString patientName = data->metaDataValues(tr("PatientName"))[0];	
	    d->view2DAxial->SetPatientName (patientName.toAscii().constData());
	    d->view2DSagittal->SetPatientName (patientName.toAscii().constData());
	    d->view2DCoronal->SetPatientName (patientName.toAscii().constData());
        d->view3D->SetPatientName (patientName.toAscii().constData());
    }
    
    if( data->hasMetaData("StudyDescription")){
        const QString studyName = data->metaDataValues(tr("StudyDescription"))[0];
        d->view2DAxial->SetStudyName (studyName.toAscii().constData());
	    d->view2DSagittal->SetStudyName (studyName.toAscii().constData());
	    d->view2DCoronal->SetStudyName (studyName.toAscii().constData());
        d->view3D->SetStudyName (studyName.toAscii().constData());
    }
    
    if (data->hasMetaData("SeriesDescription")){
        const QString seriesName = data->metaDataValues(tr("SeriesDescription"))[0];
        d->view2DAxial->SetSeriesName (seriesName.toAscii().constData());
	    d->view2DSagittal->SetSeriesName (seriesName.toAscii().constData());
	    d->view2DCoronal->SetSeriesName (seriesName.toAscii().constData());
        d->view3D->SetSeriesName (seriesName.toAscii().constData());
    }
	
    
    if(d->imageData) {
        d->slider->blockSignals (true);
		if (d->dimensionBox->currentText()==tr("Space")) {
			if( d->orientation=="Axial") {
				d->slider->setRange(0, d->imageData->zDimension()-1);
			}
			else if( d->orientation=="Sagittal") {
				d->slider->setRange(0, d->imageData->xDimension()-1);
			}
			else if( d->orientation=="Coronal") {
				d->slider->setRange(0, d->imageData->yDimension()-1);
			}
		}
		else if (d->dimensionBox->currentText()==tr("Time")) {
			d->slider->setRange(0, d->imageData->tDimension()-1);
		}
		d->slider->blockSignals (false);
    }
	*/
    // this->update(); // update is not the role of the plugin, but of the app
}

void *v3dViewPublic::data (void)
{
    return d->data;
}

QSet<dtkAbstractView *> v3dViewPublic::linkedViews (void)
{
    return d->linkedViews;
}

QWidget *v3dViewPublic::widget(void)
{
    return d->widget;
}


// /////////////////////////////////////////////////////////////////
// Type instanciation
// /////////////////////////////////////////////////////////////////

dtkAbstractView *createV3dViewPublic(void)
{
    return new v3dViewPublic;
}
