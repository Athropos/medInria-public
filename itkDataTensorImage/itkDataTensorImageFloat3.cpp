// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "itkDataTensorImageFloat3.h"

#include <dtkCore/dtkAbstractDataFactory.h>

#include <itkTensor.h>
#include <itkImage.h>
#include <itkImageRegionConstIterator.h>
#include <itkImageRegionIteratorWithIndex.h>
#include <itkImageFileWriter.h>
#include <itkVectorImage.h>
#include <itkVector.h>


// /////////////////////////////////////////////////////////////////
// itkDataTensorImagePrivate
// /////////////////////////////////////////////////////////////////

class itkDataTensorImageFloat3Private
{
public:
    typedef itk::Tensor<float, 3>    TensorType;
    typedef itk::Image<TensorType, 3> TensorImageType;
  
    TensorImageType::Pointer tensors;

    QImage        thumbnail;
    QList<QImage> thumbnails;
};

// /////////////////////////////////////////////////////////////////
// itkDataTensorImage
// /////////////////////////////////////////////////////////////////

itkDataTensorImageFloat3::itkDataTensorImageFloat3(void) : dtkAbstractDataTypedImage<3,float>(), d(new itkDataTensorImageFloat3Private)
{
    d->tensors = 0;
    d->thumbnail = QImage(128, 128, QImage::Format_RGB32);
    d->thumbnails << d->thumbnail;
}

itkDataTensorImageFloat3::~itkDataTensorImageFloat3(void)
{
    delete d;
    d = 0;
}

bool itkDataTensorImageFloat3::registered(void)
{
    return dtkAbstractDataFactory::instance()->registerDataType("itkDataTensorImageFloat3", createItkDataTensorImageFloat3);
}

QString itkDataTensorImageFloat3::description(void) const
{
    return "itkDataTensorImageFloat3";
}

void *itkDataTensorImageFloat3::data(void)
{
    return d->tensors.GetPointer();
}

void *itkDataTensorImageFloat3::output(void)
{
    return d->tensors.GetPointer();
}

void itkDataTensorImageFloat3::setData(void *data)
{
    typedef itkDataTensorImageFloat3Private::TensorImageType TensorImageType;

    if( TensorImageType* tensors = dynamic_cast<TensorImageType*>( (itk::Object*)(data) ) ){
        d->tensors = tensors;
    }
    else
      qDebug() << "Cannot cast pointer to correct tensor type";
}

int itkDataTensorImageFloat3::xDimension (void)
{
    if (!d->tensors.IsNull())
      return d->tensors->GetLargestPossibleRegion().GetSize()[0];
    return -1;
}

int itkDataTensorImageFloat3::yDimension (void)
{
    if (!d->tensors.IsNull())
        return d->tensors->GetLargestPossibleRegion().GetSize()[1];
    return -1;
}

int itkDataTensorImageFloat3::zDimension (void)
{
    if (!d->tensors.IsNull())
        return d->tensors->GetLargestPossibleRegion().GetSize()[2];
    return -1;
}

QImage& itkDataTensorImageFloat3::thumbnail  (void) const
{
    // TODO: TEMPORARY black image just to allow drag and drop    
    return d->thumbnail;
}

QList<QImage>& itkDataTensorImageFloat3::thumbnails (void) const
{
    return d->thumbnails;
}

// /////////////////////////////////////////////////////////////////
// Type instantiation
// /////////////////////////////////////////////////////////////////

dtkAbstractData *createItkDataTensorImageFloat3(void)
{
    return new itkDataTensorImageFloat3;
}
