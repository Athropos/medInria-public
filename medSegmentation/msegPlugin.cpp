// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "msegPlugin.h"

#include "msegAlgorithmInitializer.h"

#include <dtkCore/dtkLog.h>
namespace mseg {

// /////////////////////////////////////////////////////////////////
// PluginPrivate
// /////////////////////////////////////////////////////////////////

class PluginPrivate
{
public:
    // Class variables go here.
    static const char *s_Name;
    static const char *s_Type;
};
const char * PluginPrivate::s_Name = "mseg::Plugin";
const char * PluginPrivate::s_Type = "Process";

// /////////////////////////////////////////////////////////////////
// Plugin
// /////////////////////////////////////////////////////////////////

Plugin::Plugin(QObject *parent) : dtkPlugin(parent), d(new PluginPrivate)
{

}

Plugin::~Plugin(void)
{
    delete d;
    d = NULL;
}

bool Plugin::initialize(void)
{
    return AlgorithmInitializer::initialize();
}

bool Plugin::uninitialize(void)
{
    return true;
}

QString Plugin::name(void) const
{
    return PluginPrivate::s_Name;
}

QString Plugin::description(void) const
{
    return tr("Segmentation plugin\n<br/>"
              "Manual painting of regions: inside, and outside."
              "<br/> Exports masks with three values: inside (1), outside (2)"
              "and other (0). You may leave out the outside colour "
              "for simple binary masks.");
}

QString Plugin::version(void) const
{
    return MEDSEGMENTATIONPLUGIN_VERSION;
}

QString Plugin::contact(void) const
{
    return "John.Stark@inria.fr";
}

QStringList Plugin::authors(void) const
{
    QStringList list;
    list << "John Stark";
    return list;
}

QStringList Plugin::contributors(void) const
{
    QStringList list;
    list <<  QString::fromUtf8("Benoît Bleuzé")
             << "Olivier Commowick";
    return list;
}

QString Plugin::identifier(void) const
{
    return PluginPrivate::s_Name;
}

QStringList Plugin::tags(void) const
{
    return QStringList();
}

QStringList Plugin::types(void) const
{
    return QStringList() << PluginPrivate::s_Type;
}

Q_EXPORT_PLUGIN2(Plugin, Plugin)

} // namespace mseg
