// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "msegPlugin.h"

#include "msegConfiguration.h"

#include <dtkCore/dtkLog.h>
namespace mseg {

// /////////////////////////////////////////////////////////////////
// PluginPrivate
// /////////////////////////////////////////////////////////////////

class PluginPrivate 
{
public:
    // Class variables go here.
    static const char *s_Name;
    static const char *s_Type;
};
const char * PluginPrivate::s_Name = "mseg::Plugin";
const char * PluginPrivate::s_Type = "Process";

// /////////////////////////////////////////////////////////////////
// Plugin
// /////////////////////////////////////////////////////////////////

Plugin::Plugin(QObject *parent) : dtkPlugin(parent), d(new PluginPrivate)
{

}

Plugin::~Plugin(void)
{
    delete d;
    d = NULL;
}

bool Plugin::initialize(void)
{
    if(!Configuration::registerWithViewerConfigurationFactory()) {
        dtkWarning() << "Unable to register View type";
        return false;
    } 

    return true;
}

bool Plugin::uninitialize(void)
{
    return true;
}

QString Plugin::name(void) const
{
    return PluginPrivate::s_Name;
}

QString Plugin::description(void) const
{
    return PluginPrivate::s_Name;
}

QStringList Plugin::tags(void) const
{
    return QStringList();
}

QStringList Plugin::types(void) const
{
    return QStringList() << PluginPrivate::s_Type;
}

Q_EXPORT_PLUGIN2(Plugin, Plugin)

} // namespace mseg
