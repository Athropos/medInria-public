// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "msegView.h"

#include "msegController.h"
#include "msegAlgorithmConnectedThreshold.h"
#include "msegConfiguration.h"

#include "medAbstractViewScene.h"
#include <medCore/medAbstractView.h>

#include <dtkCore/dtkAbstractViewFactory.h>
#include <dtkCore/dtkAbstractData.h>
#include <dtkCore/dtkSmartPointer.h>
#include <dtkCore/dtkLog.h>

#include <QObject>
#include <QEvent>
#include <QGraphicsSceneMouseEvent>

namespace mseg {

// /////////////////////////////////////////////////////////////////
// medViewSegmentationPrivate
// /////////////////////////////////////////////////////////////////

class medViewSegmentationPrivate
{
public:
};

// /////////////////////////////////////////////////////////////////
// View
// /////////////////////////////////////////////////////////////////
QString View::s_description()
{
    static QString name = "medViewSegmentation";
    return name;
}

View::View(Controller * controller) 
    : dtkAbstractView(), 
    m_segmentationController(controller),
    m_baseView(NULL)
{
}

View::~View(void)
{
    removeFromView();
}

QString View::description(void) const
{
    return s_description();
}

bool View::mousePressEvent( QGraphicsSceneMouseEvent *mouseEvent )
{
    if ( ! m_baseView ) 
        return false;

    medAbstractViewScene * vscene = this->scene();

    Q_ASSERT( vscene );

    dtkAbstractView * view = vscene->view();
        // stackedViewContainers()->container("Single")->view() ;

    dtkAbstractData * viewData = Controller::viewData( view );

    mouseEvent->accept();

    if (vscene->isScene2D()) {
        // Convert mouse click to a 3D point in the image.

        QVector3D posImage = vscene->sceneToImagePos( mouseEvent->pos() );
        //Project vector onto plane


        dtkSmartPointer <mseg::AlgorithmConnectedThreshold> alg( new mseg::AlgorithmConnectedThreshold() );

        alg->setInput(viewData);
        alg->setSeedPoint( posImage );

        this->m_segmentationController->run( alg );

    }
    return mouseEvent->isAccepted();
}

bool View::mouseMoveEvent( QGraphicsSceneMouseEvent *mouseEvent )
{
    return mouseEvent->isAccepted();
}

bool View::mouseReleaseEvent( QGraphicsSceneMouseEvent * mouseEvent )
{
    medAbstractViewScene * vscene = this->scene();
    //ConfigurationPrivate::viewScene( view );

    Q_ASSERT( vscene );

//    scene->removeItem( d->viewEventHandler.data() );
    return mouseEvent->isAccepted();
}

bool View::eventFilter( QObject *obj, ::QEvent *event )
{
    if ( !qobject_cast<medAbstractViewScene*>(obj) ) {
        dtkWarning() << "mseg::View::eventFilter : Filtering events on unknown QObject";
        return false;
    }

    // Note : QEvent is not derived from QObject.
    switch (event->type()) {
    case ( QEvent::GraphicsSceneMousePress) :
        {
            QGraphicsSceneMouseEvent* mouseEvent = dynamic_cast<QGraphicsSceneMouseEvent *>(event);
            return this->mousePressEvent( mouseEvent );
        }
    case ( QEvent::GraphicsSceneMouseMove) :
        {
            QGraphicsSceneMouseEvent* mouseEvent = dynamic_cast<QGraphicsSceneMouseEvent *>(event);
            return this->mouseMoveEvent( mouseEvent );
        }
    case ( QEvent::GraphicsSceneMouseRelease ) :
        {
            QGraphicsSceneMouseEvent* mouseEvent = dynamic_cast<QGraphicsSceneMouseEvent *>(event);
            return this->mouseReleaseEvent( mouseEvent );
        }
    default:
        {
            // standard event processing
            return QObject::eventFilter(obj, event);
        }
    }
}

void View::installOnView( medAbstractView * view )
{
    if (m_baseView) 
        dtkWarning() << "Installing View when it has already been installed";

    m_baseView = view;
    medAbstractViewScene * scene = Controller::viewScene( m_baseView );
    scene->installEventFilter( this );
}

void View::removeFromView()
{
    if ( m_baseView ) {
        medAbstractViewScene * scene = Controller::viewScene( m_baseView );
        scene->removeEventFilter( this );
        m_baseView = NULL;
    }
}


medAbstractViewScene * View::scene()
{
    medAbstractViewScene * ret = NULL;
    if ( m_baseView ) {
        QGraphicsView * gv = qobject_cast< QGraphicsView *>( m_baseView->receiverWidget() );
        if ( gv ) {
             ret = qobject_cast< medAbstractViewScene *>(gv->scene());
        }
    }
    return ret;
}


} // namespace mseg


