// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#ifndef MEDVIEWSEGMENTATION_H
#define MEDVIEWSEGMENTATION_H

#include <dtkCore/dtkAbstractView.h>

#include "msegPluginExport.h"

//Forward declarations
class medAbstractView;
class medAbstractViewScene;
class medToolBoxSegmentation;

namespace mseg {

class MEDVIEWSEGMENTATIONPLUGIN_EXPORT ViewFilter : public dtkAbstractView
{
    Q_OBJECT

public:
             ViewFilter( medToolBoxSegmentation * controllerToolbox);
    virtual ~ViewFilter(void);

    virtual QString description(void) const;

    void installOnView(medAbstractView * view);
    void removeFromView(medAbstractView * view);
    void removeFromAllViews();

protected:
    bool eventFilter(QObject *obj, QEvent *event);

    medAbstractViewScene * scene(medAbstractView * view);

    /** Event handlers, derived classes should override those they need.
     *  \return     true if the event was processed and should not be passed to the next handler.
     *  Provide default implementations which do nothing, returning false. */
    virtual bool mousePressEvent( medAbstractViewScene *vscene, QGraphicsSceneMouseEvent *mouseEvent );
    virtual bool mouseReleaseEvent( medAbstractViewScene *vscene, QGraphicsSceneMouseEvent *mouseEvent );
    virtual bool mouseMoveEvent( medAbstractViewScene *vscene, QGraphicsSceneMouseEvent *mouseEvent );

private:
    static QString s_description();

    medToolBoxSegmentation * m_segmentationController;
    QSet<medAbstractView *> m_views;

};

} // namespace mseg

#endif
