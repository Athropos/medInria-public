// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#ifndef medProcessPaintSegm_H
#define medProcessPaintSegm_H

#include <dtkCore/dtkAbstractProcess.h>

#include <itkImage.h>

#include "msegPluginExport.h"

class medProcessPaintSegmPrivate;

class MEDVIEWSEGMENTATIONPLUGIN_EXPORT medProcessPaintSegm : public dtkAbstractProcess
{
    Q_OBJECT;

public:
    typedef itk::Image<float,3> ImageType;
    typedef itk::Image<unsigned char,3> MaskType;
    typedef itk::Image<unsigned char,3> SegmType;

             medProcessPaintSegm(void);
    virtual ~medProcessPaintSegm(void);
    static dtkAbstractProcess *create(void);

    virtual QString description(void) const;
    virtual QString identifier(void) const;

    static bool registered(void);

    static QString s_identifier(void);

    static QString MaskImageTypeIdentifier();
    // Input channels
    enum { ImageChannel = 0, MaskChannel = 1};
    //! Override base class.
    virtual void setInput(dtkAbstractData *data, int channel);
    virtual  int update(void);
    virtual void *data (void);

    dtkAbstractData * output();

protected:
    void setOutputMetadata(const dtkAbstractData * inputData, dtkAbstractData * outputData);

private:
    medProcessPaintSegmPrivate *d;
};


#endif
