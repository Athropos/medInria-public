// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "itkAddConstantToImage.h"

#include <dtkCore/dtkAbstractProcessFactory.h>
#include <dtkCore/dtkAbstractDataFactory.h>

#include "itkImage.h"
#include "itkAddConstantToImageFilter.h"

// /////////////////////////////////////////////////////////////////
// itkAddConstantToImagePrivate
// /////////////////////////////////////////////////////////////////

class itkAddConstantToImagePrivate
{
public:
    dtkAbstractData *input;
    dtkAbstractData *output;
    double constant;
    template <class PixelType> int update ( void );
};

template <class PixelType> int itkAddConstantToImagePrivate::update ( void )
{
    typedef itk::Image< PixelType, 3 > ImageType;
    typedef itk::AddConstantToImageFilter< ImageType, double, ImageType >  FilterType;
    typename FilterType::Pointer filter = FilterType::New();

    qDebug() << "Setting filter";
    
    filter->SetInput ( dynamic_cast<ImageType *> ( ( itk::Object* ) ( input->data() ) ) );
    filter->SetConstant ( constant );
    filter->Update();

    qDebug() << "Filter has finished";
    
    output->setData ( filter->GetOutput() );

    return EXIT_SUCCESS;
}

// /////////////////////////////////////////////////////////////////
// itkAddConstantToImage
// /////////////////////////////////////////////////////////////////

itkAddConstantToImage::itkAddConstantToImage( void ) : dtkAbstractProcess(), d ( new itkAddConstantToImagePrivate)
{
    d->output = NULL;
    d->constant = 1.0;
}

itkAddConstantToImage::~itkAddConstantToImage( void )
{
    delete d;
    d = NULL;
}

bool itkAddConstantToImage::registered ( void )
{
    return dtkAbstractProcessFactory::instance()->registerProcessType ( "itkAddConstantToImage", createitkAddConstantToImage);
}

QString itkAddConstantToImage::description ( void ) const
{
    return "itkAddConstantToImage";
}

void itkAddConstantToImage::setInput ( dtkAbstractData *data )
{
    if ( !data )
        return;

    QString description = data->description();

    d->output = dtkAbstractDataFactory::instance()->create ( description );

    d->input = data;
}

void itkAddConstantToImage::setParameter ( double  data, int channel )
{
    switch ( channel )
    {

    case ( 0 ) :
        d->constant = data;
        break;
    default :
        return;
    }
}

int itkAddConstantToImage::update ( void )
{
    if ( !d->input )
        return -1;

    QString descr = d->input->description();

    qDebug() << "itkAddConstantToImage, update : " << descr;

    if ( descr == "itkDataImageChar3" )
    {
        d->update<char>();
    }
    else if ( descr == "itkDataImageUChar3" )
    {
        d->update<unsigned char>();
    }
    else if ( descr == "itkDataImageShort3" )
    {
        d->update<short>();
    }
    else if ( descr == "itkDataImageUShort3" )
    {
        d->update<unsigned short>();
    }
    else if ( descr == "itkDataImageInt3" )
    {
        d->update<int>();
    }
    else if ( descr == "itkDataImageUInt3" )
    {
        d->update<unsigned int>();
    }
    else if ( descr == "itkDataImageLong3" )
    {
        d->update<long>();
    }
    else if ( descr== "itkDataImageULong3" )
    {
        d->update<unsigned long>();
    }
    else if ( descr == "itkDataImageFloat3" )
    {
        d->update<float>();
    }
    else if ( descr == "itkDataImageDouble3" )
    {
        d->update<double>();
    }
    else
    {
        qDebug() << "Error : pixel type not yet implemented ("
        << descr
        << ")";
        return -1;
    }

    return EXIT_SUCCESS;
}

dtkAbstractData * itkAddConstantToImage::output ( void )
{
    return ( d->output );
}

// /////////////////////////////////////////////////////////////////
// Type instanciation
// /////////////////////////////////////////////////////////////////

dtkAbstractProcess * createitkAddConstantToImage ( void )
{
    return new itkAddConstantToImage;
}
