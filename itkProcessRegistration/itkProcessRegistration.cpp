// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "itkProcessRegistration.h"

#include "itkAffineRegistrationMethod.h"
#include "itkRigidRegistrationMethod.h"

#include <dtkCore/dtkAbstractData.h>
#include <dtkCore/dtkAbstractView.h>
#include <dtkCore/dtkAbstractDataFactory.h>
#include <dtkCore/dtkAbstractProcessFactory.h>

// /////////////////////////////////////////////////////////////////
// itkProcessRegistrationPrivate
// /////////////////////////////////////////////////////////////////

class itkProcessRegistrationPrivate
{
public:
    dtkAbstractData *fixed;
    dtkAbstractData *moving;
    
    dtkAbstractView *view1;
    dtkAbstractView *view2;
    dtkAbstractView *view3;
    
    QString regType;
    
    const itk::Image<double, 3> *outputImage;
    
    itkProcessRegistration::RegistrationFactoryType::Pointer regFactory;

    itkProcessRegistrationWidget *ui;
};

// /////////////////////////////////////////////////////////////////
// itkProcessRegistration
// /////////////////////////////////////////////////////////////////

itkProcessRegistration::itkProcessRegistration(void) : dtkAbstractProcess(), d(new itkProcessRegistrationPrivate)
{
    d->regFactory = itkProcessRegistration::RegistrationFactoryType::New();
    d->view1 = NULL;
    d->view2 = NULL;
    d->view3 = NULL;
	 d->regType = "Rigid";

    this->addProperty("RegistrationMethod", QStringList() << "Affine" << "Rigid");

	 d->ui = new itkProcessRegistrationWidget;

    connect(d->ui, SIGNAL(chooseFixedImage()), this, SLOT(chooseFixedImage()));
    connect(d->ui, SIGNAL(chooseMovingImage()), this, SLOT(chooseMovingImage()));
    connect(d->ui, SIGNAL(run()), this, SLOT(update()));
    connect(d->ui, SIGNAL(chooseRegMethod(QString)), this, SLOT(chooseRegMethod(QString)));
}

itkProcessRegistration::~itkProcessRegistration(void)
{
  
}

bool itkProcessRegistration::registered(void)
{
    return dtkAbstractProcessFactory::instance()->registerProcessType("itkProcessRegistration", createItkProcessRegistration);
}

QString itkProcessRegistration::description(void) const
{
    return "itkProcessRegistration";
}

void itkProcessRegistration::setParameter(dtkAbstractObject*  data, int channel)
{
    if (channel == 1) {
        d->view1 = dynamic_cast<dtkAbstractView *>(data);
        d->view1->setBackgroundColor(255, 0, 0);
    }

    if (channel == 2) {
        d->view2 = dynamic_cast<dtkAbstractView *>(data);
        d->view2->setBackgroundColor(0, 255, 0);
    }

    if (channel == 3) {
        d->view3 = dynamic_cast<dtkAbstractView *>(data);
        d->view3->setBackgroundColor(0, 0, 255);
    }
}

dtkAbstractData *itkProcessRegistration::output(void)
{
    dtkAbstractData *data = dtkAbstractDataFactory::instance()->create("itkDataImageDouble3");

    if(data) {
        data->setData((itk::Image<double, 3> *)(d->outputImage));
        data->update();
    }

    return data;
}

void itkProcessRegistration::chooseRegMethod(QString regMethod)
{
    d->regType = regMethod;
}

// /////////////////////////////////////////////////////////////////
// 
// /////////////////////////////////////////////////////////////////

void itkProcessRegistration::setInput(dtkAbstractData *data, int channel)
{
    if(channel == 1)
        d->fixed = data;

    if(channel == 2)
        d->moving = data;
}

// /////////////////////////////////////////////////////////////////
// 
// /////////////////////////////////////////////////////////////////

QWidget *itkProcessRegistration::ui(void)
{
    if(!d->ui)
        d->ui = new itkProcessRegistrationWidget;

    return d->ui;
}

// /////////////////////////////////////////////////////////////////
// 
// /////////////////////////////////////////////////////////////////

void itkProcessRegistration::chooseFixedImage(void)
{
    QString fileName = QFileDialog::getOpenFileName(0, tr("Open File"), "/home", tr("images (*)"));
    
    d->fixed = dtkAbstractDataFactory::instance()->create("itkDataImageDouble3");

	 qDebug() << "Step 1... ok";


    d->fixed->enableReader("itkDataImageDouble3Reader");

	 qDebug() << "Step 2... ok";


    d->fixed->read(fileName);

	 qDebug() << "Step 3... ok";



    d->fixed->update();

    d->ui->setFixedImageLabel(fileName);

    if(d->view1) {
        d->view1->setData(d->fixed);
        d->view1->update();
    }
}

void itkProcessRegistration::chooseMovingImage(void)
{
    QString fileName = QFileDialog::getOpenFileName(0, tr("Open File"), "/home", tr("images (*)"));
    
    d->moving = dtkAbstractDataFactory::instance()->create("itkDataImageDouble3");
    d->moving->enableReader("itkDataImageDouble3Reader");
    d->moving->read(fileName);
    d->moving->update();

    this->d->ui->setMovingImageLabel(fileName);

    if(d->view2) {
        d->view2->setData(d->moving);
        d->view2->update();
    }
}

int itkProcessRegistration::parseRegistrationType()
{
  RegistrationMethodType::Pointer regMethod = NULL;

  if ( d->regType == "Rigid" )
  {
	 regMethod = itk::RigidRegistrationMethod<ImageType>::New();

	 qDebug() << "Chosen rigid method";
  }
  else if ( d->regType == "Affine" )
  {
      regMethod = itk::AffineRegistrationMethod<ImageType>::New();

      qDebug() << "Chosen affine method";
  }
  
  if ( !regMethod.IsNull() )
      this->doRegistration(regMethod.GetPointer());
  
  return EXIT_SUCCESS;
}

void itkProcessRegistration::update(void)
{
    parseRegistrationType();
}

int itkProcessRegistration::doRegistration(RegistrationMethodType *method)
{
    itk::Image<double, 3>  *fixedImage = dynamic_cast<itk::Image<double, 3> *>((itk::Object *)(d->fixed->output()));
    itk::Image<double, 3> *movingImage = dynamic_cast<itk::Image<double, 3> *>((itk::Object *)(d->moving->output()));
    
    d->regFactory->AddRegistrationMethod( 0, method );
    
    try {
        d->regFactory->GetGeneralTransform()->RemoveAllTransforms();
        d->regFactory->SetFixedImage( fixedImage );
        d->regFactory->SetMovingImage( movingImage );
        d->regFactory->Initialize();
        d->regFactory->ApplyRegistrationMethod( 0 );
    }
    catch ( itk::ExceptionObject & e ) {
        d->regFactory->RemoveRegistrationMethod( 0 );
    }

    d->outputImage = d->regFactory->GetOutput();
    
    // d->regFactory->RemoveRegistrationMethod( 0 );
    
    if(d->view3) {
        d->view3->setData(this->output());
        d->view3->update();
    }

    return d->outputImage ? true : false;
}

void itkProcessRegistration::onPropertySet(QString key, QString value)
{
    if(key == "RegistrationMethod")
        this->chooseRegMethod(value);
}

// /////////////////////////////////////////////////////////////////
// Type instanciation
// /////////////////////////////////////////////////////////////////

dtkAbstractProcess *createItkProcessRegistration(void)
{
    return new itkProcessRegistration;
}

