// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "ITKProcessExample.h"

#include <dtkCore/dtkAbstractProcessFactory.h>
#include <dtkCore/dtkAbstractDataFactory.h>

#include "itkImage.h"
#include "itkDiscreteGaussianImageFilter.h"

// /////////////////////////////////////////////////////////////////
// ITKProcessExamplePrivate
// /////////////////////////////////////////////////////////////////

class ITKProcessExamplePrivate
{
public:
    itk::Image <float, 3>::Pointer input;
    dtkAbstractData *output;	
    double variance;
};

// /////////////////////////////////////////////////////////////////
// ITKProcessExample
// /////////////////////////////////////////////////////////////////

ITKProcessExample::ITKProcessExample(void) : dtkAbstractProcess(), d(new ITKProcessExamplePrivate)
{
    d->output = NULL;      
    d->variance = 4.0;
}

ITKProcessExample::~ITKProcessExample(void)
{
    delete d;
    d = NULL;
}

bool ITKProcessExample::registered(void)
{
    return dtkAbstractProcessFactory::instance()->registerProcessType("ITKProcessExampleGaussianBlur", createITKProcessExample);
}

QString ITKProcessExample::description(void) const
{  
    return "ITKProcessExampleGaussianBlur";
}

void ITKProcessExample::setInput(dtkAbstractData *data)
{
    qDebug() << "entering setInput method";
    
    if (!data)  
        return;
    
    d->input = dynamic_cast< itk::Image<float, 3> *> ((itk::Object*)(data->data()));
}

void ITKProcessExample::setParameter(double  data, int channel)
{
    switch (channel){

        case (0):
                d->variance = data;
                break;
        default :
                return;
        }
}

int ITKProcessExample::update (void)
{
    if (!d->input)
	{
	    qDebug() << "in update method : d->input == NULL";	  
            return -1;
	}	

    typedef itk::Image< float, 3 > ImageType;
    typedef itk::DiscreteGaussianImageFilter< ImageType, ImageType >  FilterType;
    
    FilterType::Pointer gaussianFilter = FilterType::New();

    gaussianFilter->SetInput( d->input );
    gaussianFilter->SetVariance(d->variance);

    gaussianFilter->Update();

    d->output = dynamic_cast <dtkAbstractData *>(dtkAbstractDataFactory::instance()->create("itkDataImageFloat3"));

    d->output->setData(gaussianFilter->GetOutput());

    return EXIT_SUCCESS;
}

dtkAbstractData * ITKProcessExample::output(void)
{	
	return (d->output);
}

// /////////////////////////////////////////////////////////////////
// Type instanciation
// /////////////////////////////////////////////////////////////////

dtkAbstractProcess * createITKProcessExample(void)
{
    return new ITKProcessExample;
}
