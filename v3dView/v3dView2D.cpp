// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include <vtkINRIA3DConfigure.h>

#ifdef vtkINRIA3D_USE_ITK
#include "medItk.h"
#endif

#include "v3dView2D.h"
#include "v3dView3D.h"
#include "v3dViewWidget.h"

#include <dtkCore/dtkAbstractViewFactory.h>

#include <vtkRenderer.h>
#include <vtkRenderWindow.h>

#include <vtkViewImage2D.h>
#include <vtkViewImage3D.h>
#include <vtkLookupTableManager.h>
#include <vtkImageActor.h>

#include <QVTKWidget.h>

#include <QMenu>
#include <QMouseEvent>

// /////////////////////////////////////////////////////////////////
// v3dView2DPrivate
// /////////////////////////////////////////////////////////////////

class v3dView2DPrivate
{
public:
    vtkRenderer *renderer;
    vtkViewImage2D *view;

    v3dViewWidget *widget;
    QMenu *menu;
    dtkAbstractData *data;
};

// /////////////////////////////////////////////////////////////////
// v3dView2D
// /////////////////////////////////////////////////////////////////

v3dView2D::v3dView2D(void) : dtkAbstractView(), d(new v3dView2DPrivate)
{
    d->renderer = vtkRenderer::New();

    d->widget = new v3dViewWidget;
    d->widget->GetRenderWindow()->AddRenderer(d->renderer);

    d->data = 0;

    d->view = vtkViewImage2D::New();
    d->view->SetRenderWindow(d->widget->GetRenderWindow());
    d->view->SetRenderer(d->renderer);
    d->view->SetBackgroundColor(0.0, 0.0, 0.0);
    d->view->SetLeftButtonInteractionStyle(vtkViewImage2D::ZOOM_INTERACTION);
    d->view->SetMiddleButtonInteractionStyle(vtkViewImage2D::SELECT_INTERACTION);
    d->view->SetRightButtonInteractionStyle(vtkViewImage2D::NO_INTERACTION);
    d->view->CursorFollowMouseOn();
    d->view->Show2DAxisOff();
    d->view->SetInterpolationMode (1);

    
    QAction* axialAct = new QAction (tr("Axial"), d->widget);
    connect(axialAct, SIGNAL(triggered()), this, SLOT(onMenuAxialTriggered()));
    QAction* coronalAct = new QAction (tr("Coronal"), d->widget);
    connect(coronalAct, SIGNAL(triggered()), this, SLOT(onMenuCoronalTriggered()));
    QAction* sagittalAct = new QAction (tr("Sagittal"), d->widget);
    connect(sagittalAct, SIGNAL(triggered()), this, SLOT(onMenuSagittalTriggered()));
    
    QAction* zoomAct = new QAction (tr("Zoom"), d->widget);
    connect(zoomAct, SIGNAL(triggered()), this, SLOT(onMenuZoomTriggered()));
    QAction* wlAct = new QAction (tr("Window / Level"), d->widget);
    connect(wlAct, SIGNAL(triggered()), this, SLOT(onMenuWindowLevelTriggered()));
    
    QActionGroup* group = new QActionGroup ( d->widget );
    group->addAction (zoomAct);
    group->addAction (wlAct);
    wlAct->setChecked (true);

    
    d->menu = new QMenu ( d->widget );
    d->menu->addAction (axialAct);
    d->menu->addAction (coronalAct);
    d->menu->addAction (sagittalAct);
    d->menu->addSeparator();
    d->menu->addAction (zoomAct);
    d->menu->addAction (wlAct);


    this->addProperty("Orientation",          QStringList() << "Axial" << "Sagittal" << "Coronal");
    this->addProperty("ScalarBarVisibility",  QStringList() << "true" << "false");
    this->addProperty("LookupTable",          QStringList() << "Default" << "Black&White" << "Black&WhiteInversed" << "Spectrum" << "HotMetal" << "GE" << "Flow" << "Loni" << "Loni2" << "Asymmetry" << "PValue" << "blueBlackAlpha" << "greenBlackAlpha" << "redBlackAlpha");
    this->addProperty("BackgroundLookupTable",QStringList() << "Default" << "Black&White" << "Black&WhiteInversed" << "Spectrum" << "HotMetal" << "GE" << "Flow" << "Loni" << "Loni2" << "Asymmetry" << "PValue" << "blueBlackAlpha" << "greenBlackAlpha" << "redBlackAlpha");
    this->addProperty("Opacity",              QStringList() << "1.0");
    this->addProperty("ShowAxis",             QStringList() << "true" << "false");
    this->addProperty("Interaction",          QStringList() << "Zoom" << "Window / Level");

    
    connect (d->widget, SIGNAL (mouseEvent (QMouseEvent*)), this, SLOT (onMousePressEvent (QMouseEvent*)));
    
}

v3dView2D::~v3dView2D(void)
{
    d->widget->GetRenderWindow()->RemoveRenderer ( d->renderer );
    d->view->SetRenderWindow(0);
    d->view->Delete();
    d->renderer->Delete();
}

bool v3dView2D::registered(void)
{
    return dtkAbstractViewFactory::instance()->registerViewType("v3dView2D", createV3dView2D);
}

QString v3dView2D::description(void) const
{
    return "v3dView2D";
}

// /////////////////////////////////////////////////////////////////
// 
// /////////////////////////////////////////////////////////////////

void v3dView2D::clear(void)
{
    if(!d->view)
	return;
    
    d->view->Clear();
}

void v3dView2D::reset(void)
{
    if(!d->view)
	return;
    
    d->view->Reset();
}

void v3dView2D::update(void)
{
    d->view->Render();

    d->widget->update();
}

void v3dView2D::link(dtkAbstractView *other)
{
    if(!d->view)
      return;
  
    if(!other)
      return;
  
    if(vtkSynchronizedView *view = dynamic_cast<vtkSynchronizedView *>((vtkObject*)(other->view())))
      d->view->AddChild(view);
}

void v3dView2D::unlink(dtkAbstractView *other)
{
    Q_UNUSED(other);
}

void *v3dView2D::view(void)
{
    return d->view;
}

void v3dView2D::setData(dtkAbstractData *data)
{
    if(!data)
      return;

    d->data = data;

    if (data->hasMetaData("PatientName")){
      const QString patientName = data->metaDataValues(tr("PatientName"))[0];
      d->view->SetPatientNameData ( patientName.toAscii().constData() );
    }
    
    if( data->hasMetaData("StudyDescription")){
      const QString studyName = data->metaDataValues(tr("StudyDescription"))[0];
      d->view->SetStudyNameData ( studyName.toAscii().constData() );
    }
    
    if (data->hasMetaData("SeriesDescription")){
      const QString seriesName = data->metaDataValues(tr("SeriesDescription"))[0];
      d->view->SetSerieNameData ( seriesName.toAscii().constData() );
    }


#ifdef vtkINRIA3D_USE_ITK
    if( itk::Image<char, 3>* image = dynamic_cast<itk::Image<char, 3>*>( (itk::Object*)( data->data() ) ) )
      d->view->SetITKImage ( image );
    else if( itk::Image<unsigned char, 3>* image = dynamic_cast<itk::Image<unsigned char, 3>*>( (itk::Object*)( data->data() ) ) )
      d->view->SetITKImage ( image );
    else if( itk::Image<short, 3>* image = dynamic_cast<itk::Image<short, 3>*>( (itk::Object*)( data->data() ) ) )
      d->view->SetITKImage ( image );
    else if( itk::Image<unsigned short, 3>* image = dynamic_cast<itk::Image<unsigned short, 3>*>( (itk::Object*)( data->data() ) ) )
      d->view->SetITKImage ( image );
    else if( itk::Image<int, 3>* image = dynamic_cast<itk::Image<int, 3>*>( (itk::Object*)( data->data() ) ) )
      d->view->SetITKImage ( image );
    else if( itk::Image<unsigned int, 3>* image = dynamic_cast<itk::Image<unsigned int, 3>*>( (itk::Object*)( data->data() ) ) )
      d->view->SetITKImage ( image );
    else if( itk::Image<long, 3>* image = dynamic_cast<itk::Image<long, 3>*>( (itk::Object*)( data->data() ) ) )
      d->view->SetITKImage ( image );
    else if( itk::Image<unsigned long, 3>* image = dynamic_cast<itk::Image<unsigned long, 3>*>( (itk::Object*)( data->data() ) ) )
      d->view->SetITKImage ( image );
    else if( itk::Image<float, 3>* image = dynamic_cast<itk::Image<float, 3>*>( (itk::Object*)( data->data() ) ) )
      d->view->SetITKImage ( image );
    else if( itk::Image<double, 3>* image = dynamic_cast<itk::Image<double, 3>*>( (itk::Object*)( data->data() ) ) )
      d->view->SetITKImage ( image );
    else if( itk::Image<itk::RGBPixel<unsigned char>, 3> *image = dynamic_cast<itk::Image<itk::RGBPixel<unsigned char>, 3>*>( (itk::Object*)( data->data() ) ) )
      d->view->SetITKImage ( image );
    else if( itk::Image<itk::Vector<unsigned char, 3>, 3> *image = dynamic_cast<itk::Image<itk::Vector<unsigned char, 3>, 3>*>( (itk::Object*)( data->data() ) ) )
      d->view->SetITKImage ( image );
    else
      qDebug() << "Cannot cast ITK image";
#endif

    if(vtkDataSet *dataset = dynamic_cast<vtkDataSet*>((vtkDataObject *)(data->data())))
      d->view->AddDataSet(dataset);

    
    dtkAbstractView::setData(data);

    this->update();
}

void *v3dView2D::data (void)
{
    if (d->data)
      return d->data->output();

    return NULL;
}

QWidget *v3dView2D::widget(void)
{
    return d->widget;
}


void v3dView2D::onPropertySet(QString key, QString value)
{
    if(key == "Orientation")
	this->onOrientationPropertySet(value);

    if(key == "ScalarBarVisibility")
	this->onScalarBarVisibilityPropertySet(value);

    if(key == "LookupTable")
	this->onLookupTablePropertySet(value);

    if(key == "BackgroundLookupTable")
	this->onBackgroundLookupTablePropertySet(value);

    if(key == "Opacity")
	this->onOpacityPropertySet(value);

    if(key == "ShowAxis")
	this->onShowAxisPropertySet(value);

     if(key == "Interaction")
	this->onInteractionPropertySet(value);

    this->widget()->update();
}


void v3dView2D::onOrientationPropertySet(QString value)
{
    double zoom = d->view->GetZoom();
    
    if (value == "Axial") {
	d->view->SetOrientation(vtkViewImage2D::AXIAL_ID);
	d->view->SetAboutData("Axial view");
    }

    if (value == "Sagittal") {
	d->view->SetOrientation(vtkViewImage2D::SAGITTAL_ID);
	d->view->SetAboutData("Sagittal view");
    }

    if (value == "Coronal") {
	d->view->SetOrientation(vtkViewImage2D::CORONAL_ID);
	d->view->SetAboutData("Coronal view");
    }

    d->view->SetZoom ( zoom );

}


void v3dView2D::onScalarBarVisibilityPropertySet(QString value)
{
    if (value == "true")
	d->view->SetScalarBarVisibility(true);

    if (value == "false")
	d->view->SetScalarBarVisibility(false);
}


void v3dView2D::onLookupTablePropertySet(QString value)
{
    if (value == "Default")
	d->view->SetLookupTable(vtkLookupTableManager::GetBWLookupTable());

    if (value == "Black&White")
	d->view->SetLookupTable(vtkLookupTableManager::GetBWLookupTable());

    if (value == "Black&WhiteInversed")
	d->view->SetLookupTable(vtkLookupTableManager::GetBWInverseLookupTable());

    if (value == "Spectrum")
	d->view->SetLookupTable(vtkLookupTableManager::GetSpectrumLookupTable());

    if (value == "HotMetal")
	d->view->SetLookupTable(vtkLookupTableManager::GetHotMetalLookupTable());

    if (value == "GE")
	d->view->SetLookupTable(vtkLookupTableManager::GetGEColorLookupTable());

    if (value == "Loni")
	d->view->SetLookupTable(vtkLookupTableManager::GetLONILookupTable());

    if (value == "Loni2")
	d->view->SetLookupTable(vtkLookupTableManager::GetLONI2LookupTable());

    if (value == "Asymmetry")
	d->view->SetLookupTable(vtkLookupTableManager::GetAsymmetryLookupTable());

    if (value == "PValue")
	d->view->SetLookupTable(vtkLookupTableManager::GetPValueLookupTable());

    if (value == "blueBlackAlpha")
	d->view->SetLookupTable(vtkLookupTableManager::GetBlueBlackAlphaLookupTable());

    if( value == "greenBlackAlpha")
	d->view->SetLookupTable(vtkLookupTableManager::GetGreenBlackAlphaLookupTable());

    if (value == "redBlackAlpha")
	d->view->SetLookupTable(vtkLookupTableManager::GetRedBlackAlphaLookupTable());
}


void v3dView2D::onBackgroundLookupTablePropertySet(QString value)
{
    if (value == "Default")
	d->view->SetBGLookupTable(vtkLookupTableManager::GetBWLookupTable());

    if (value == "Black&White")
	d->view->SetBGLookupTable(vtkLookupTableManager::GetBWLookupTable());

    if (value == "Black&WhiteInversed")
	d->view->SetBGLookupTable(vtkLookupTableManager::GetBWInverseLookupTable());

    if (value == "Spectrum")
	d->view->SetBGLookupTable(vtkLookupTableManager::GetSpectrumLookupTable());

    if (value == "HotMetal")
	d->view->SetBGLookupTable(vtkLookupTableManager::GetHotMetalLookupTable());

    if (value == "GE")
	d->view->SetBGLookupTable(vtkLookupTableManager::GetGEColorLookupTable());

    if (value == "Loni")
	d->view->SetBGLookupTable(vtkLookupTableManager::GetLONILookupTable());

    if (value == "Loni2")
	d->view->SetBGLookupTable(vtkLookupTableManager::GetLONI2LookupTable());

    if (value == "Asymmetry")
	d->view->SetBGLookupTable(vtkLookupTableManager::GetAsymmetryLookupTable());

    if (value == "PValue")
	d->view->SetBGLookupTable(vtkLookupTableManager::GetPValueLookupTable());

    if (value == "blueBlackAlpha")
	d->view->SetBGLookupTable(vtkLookupTableManager::GetBlueBlackAlphaLookupTable());

    if( value == "greenBlackAlpha")
	d->view->SetBGLookupTable(vtkLookupTableManager::GetGreenBlackAlphaLookupTable());

    if (value == "redBlackAlpha")
	d->view->SetBGLookupTable(vtkLookupTableManager::GetRedBlackAlphaLookupTable());
}


void v3dView2D::onOpacityPropertySet(QString value)
{
    bool ok;
    double opacity = value.toDouble(&ok);

    if (ok)
	d->view->GetImageActor()->SetOpacity(opacity);
    else
	qDebug("Error: cannot convert QString value to a double");
}


void v3dView2D::onShowAxisPropertySet(QString value)
{
    if (value == "true")
	d->view->SetShow2DAxis(1);

    if (value == "false")
	d->view->SetShow2DAxis(0);
}


void v3dView2D::onInteractionPropertySet(QString value)
{
    if (value == "Zoom")
	d->view->SetLeftButtonInteractionStyle   ( vtkViewImage2D::ZOOM_INTERACTION );

    if (value == "Window / Level")
	d->view->SetLeftButtonInteractionStyle   ( vtkViewImage2D::WINDOW_LEVEL_INTERACTION );
}


void v3dView2D::onMousePressEvent (QMouseEvent *event)
{
  if( event->button() == Qt::RightButton ) {
    d->menu->popup (event->globalPos());
  }  
}


void v3dView2D::onMenuAxialTriggered (void)
{
  this->onPropertySet ("Orientation", "Axial");
}


void v3dView2D::onMenuCoronalTriggered (void)
{
  this->onPropertySet ("Orientation", "Coronal");
}


void v3dView2D::onMenuSagittalTriggered (void)
{
  this->onPropertySet ("Orientation", "Sagittal");
}


void v3dView2D::onMenuZoomTriggered (void)
{
  this->onPropertySet ("Interaction", "Zoom");
}


void v3dView2D::onMenuWindowLevelTriggered (void)
{
  this->onPropertySet ("Interaction", "Window / Level");
}


// /////////////////////////////////////////////////////////////////
// Type instanciation
// /////////////////////////////////////////////////////////////////

dtkAbstractView *createV3dView2D(void)
{
    return new v3dView2D;
}
