// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#ifndef ITKDCMTKIMAGEDATAREADER_H
#define ITKDCMTKIMAGEDATAREADER_H

#include <dtkCore/dtkAbstractDataReader.h>

#include "itkDataImageReaderPluginExport.h"

class itkDCMTKDataImageReaderPrivate;

namespace itk
{
    class SliceReadCommand;
}

class ITKDATAIMAGEREADERPLUGIN_EXPORT itkDCMTKDataImageReader : public dtkAbstractDataReader
{
    Q_OBJECT

public:
             itkDCMTKDataImageReader(void);
    virtual ~itkDCMTKDataImageReader(void);

    virtual QString description(void) const;

    virtual QStringList handled(void) const;
    static bool registered(void);

    friend class itk::SliceReadCommand;
    
public slots:
    bool canRead (const QString& path);
    bool canRead (const QStringList& paths);

    void readInformation (const QString& path);
    void readInformation (const QStringList& paths);
    
    bool read (const QString& path);
    bool read (const QStringList& paths);

    void setProgress (int value);

    void addMetaDataRequest(const QString& attribute);

protected:

    // retrieve meta-data from io class and attach it to dtkdata
    void fillMetaDataDictionary(dtkAbstractData* dtkdata);

    // requests an attribute from the reader and copies it to the metadictionary of dtkData using the metaname provided
    void requestAndSetFixedMetaData(dtkAbstractData* dtkdata,  std::string metaname, std::string attribute );

    // helper to convert from STL to Qt
    void setMetaData(dtkAbstractData* data, std::pair<std::string,std::string> value);


private:
    itkDCMTKDataImageReaderPrivate *d;
};

dtkAbstractDataReader *createItkDCMTKDataImageReader(void);

#endif
