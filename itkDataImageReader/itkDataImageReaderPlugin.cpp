// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "itkDataImageReader.h"
#include "itkDCMTKDataImageReader.h"
#include "itkDataImageReaderPlugin.h"

#include <dtkCore/dtkLog.h>


// /////////////////////////////////////////////////////////////////
// itkDataImageReaderPluginPrivate
// /////////////////////////////////////////////////////////////////

class itkDataImageReaderPluginPrivate 
{
public:
    // Class variables go here.
};

// /////////////////////////////////////////////////////////////////
// itkDataImageReaderPlugin
// /////////////////////////////////////////////////////////////////

itkDataImageReaderPlugin::itkDataImageReaderPlugin(QObject *parent) : dtkPlugin(parent), d(new itkDataImageReaderPluginPrivate)
{

}

itkDataImageReaderPlugin::~itkDataImageReaderPlugin(void)
{
    delete d;

    d = NULL;
}

bool itkDataImageReaderPlugin::initialize(void)
{
    if(!itkDataImageChar3Reader::registered()) dtkWarning() << "Unable to register itkDataImageChar3Reader type";
    if(!itkDataImageUChar3Reader::registered()) dtkWarning() << "Unable to register itkDataImageUChar3Reader type";
    if(!itkDataImageShort3Reader::registered()) dtkWarning() << "Unable to register itkDataImageShort3Reader type";
    if(!itkDataImageUShort3Reader::registered()) dtkWarning() << "Unable to register itkDataImageUShort3Reader type";
    if(!itkDataImageInt3Reader::registered()) dtkWarning() << "Unable to register itkDataImageInt3Reader type";
    if(!itkDataImageUInt3Reader::registered()) dtkWarning() << "Unable to register itkDataImageUInt3Reader type";
    if(!itkDataImageLong3Reader::registered()) dtkWarning() << "Unable to register itkDataImageLong3Reader type";
    if(!itkDataImageULong3Reader::registered()) dtkWarning() << "Unable to register itkDataImageULong3Reader type";
    if(!itkDataImageFloat3Reader::registered()) dtkWarning() << "Unable to register itkDataImageFloat3Reader type";
    if(!itkDataImageDouble3Reader::registered()) dtkWarning() << "Unable to register itkDataImageDouble3Reader type";
    if(!itkDataImageVector3Reader::registered()) dtkWarning() << "Unable to register itkDataImageVector3Reader type";
    //if(!itkDataImageRGB3Reader::registered()) dtkWarning() << "Unable to register itkDataImageRGB3Reader type";
    if(!itkDCMTKDataImageReader::registered()) dtkWarning() << "Unable to register itkDCMTKDataImageReader type";

    return true;
}

bool itkDataImageReaderPlugin::uninitialize(void)
{
    return true;
}

QString itkDataImageReaderPlugin::name(void) const
{
    return "itkDataImageReaderPlugin";
}

QString itkDataImageReaderPlugin::description(void) const
{
    return "Readers for any ITK image data type.";
}

QStringList itkDataImageReaderPlugin::tags(void) const
{
  return QStringList() << "itk" << "data" << "image" << "reader";
}

QStringList itkDataImageReaderPlugin::types(void) const
{
    return QStringList() << "itkDataImageChar3Reader"
			 << "itkDataImageUChar3Reader"
			 << "itkDataImageShort3Reader"
			 << "itkDataImageUShort3Reader"
			 << "itkDataImageInt3Reader"
			 << "itkDataImageUInt3Reader"
			 << "itkDataImageLong3Reader"
			 << "itkDataImageULong3Reader"
			 << "itkDataImageFloat3Reader"
			 << "itkDataImageDouble3Reader"
			 << "itkDataImageVector3Reader"
      //<< "itkDataImageRGB3Reader"
			 << "itkDCMTKDataImageReader";
}

Q_EXPORT_PLUGIN2(itkDataImageReaderPlugin, itkDataImageReaderPlugin)
