// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "medItk.h"

#include "itkDCMTKDataImageReader.h"

#include <dtkCore/dtkAbstractData.h>
#include <dtkCore/dtkAbstractDataFactory.h>

#include <itkImageFileReader.h>
#include <itkDCMTKImageIO.h>

// /////////////////////////////////////////////////////////////////
// itkDCMTKDataImageReaderPrivate
// /////////////////////////////////////////////////////////////////

class itkDCMTKDataImageReaderPrivate
{
public:
};

// /////////////////////////////////////////////////////////////////
// itkDCMTKDataImageReader
// /////////////////////////////////////////////////////////////////


itkDCMTKDataImageReader::itkDCMTKDataImageReader(void) : dtkAbstractDataReader(), d(new itkDCMTKDataImageReaderPrivate)
{

}


itkDCMTKDataImageReader::~itkDCMTKDataImageReader(void)
{

}


bool itkDCMTKDataImageReader::registered(void)
{
    return dtkAbstractDataFactory::instance()->registerDataReaderType("itkDCMTKDataImageReader", QStringList() << "itkDataImageDouble3"
								      << "itkDataImageFloat3"
								      << "itkDataImageULong3"
								      << "itkDataImageLong3"
								      << "itkDataImageUInt3"
								      << "itkDataImageInt3"
								      << "itkDataImageUShort3"
								      << "itkDataImageShort3"
								      << "itkDataImageUChar3"
								      << "itkDataImageChar3",
								      createItkDCMTKDataImageReader);
}


QStringList itkDCMTKDataImageReader::handled(void) const
{
    return QStringList() << "itkDataImageDouble3"
			 << "itkDataImageFloat3"
			 << "itkDataImageULong3"
			 << "itkDataImageLong3"
			 << "itkDataImageUInt3"
			 << "itkDataImageInt3"
			 << "itkDataImageUShort3"
			 << "itkDataImageShort3"
			 << "itkDataImageUChar3"
			 << "itkDataImageChar3";
}


QString itkDCMTKDataImageReader::description(void) const
{
    return "itkDCMTKDataImageReader";
}


bool itkDCMTKDataImageReader::read (QString path)
{
  QStringList paths;
  paths << path;
  return read ( paths );
}

bool itkDCMTKDataImageReader::read (QStringList paths)
{

  if (paths.size()==0)
    return false;
  
  std::vector< std::string > filenames;
  for (int i=0; i<paths.size(); i++)
    filenames.push_back ( paths[i].toAscii().constData() );
  
  itk::DCMTKImageIO::Pointer io = itk::DCMTKImageIO::New();
  io->SetFileNames ( filenames );
  try {
    io->ReadImageInformation();
  }
  catch (itk::ExceptionObject &e) {
    std::cerr << e;
    return false;
  }

  if (io->GetNumberOfDimensions() != 3) {
    std::cerr << "Only 3D images are supported for now (required: " << io->GetNumberOfDimensions() << ")" << std::endl;
    return false;
  }
  

  switch (io->GetComponentType()) {
    
      case itk::ImageIOBase::UCHAR:
	{
	  itk::ImageFileReader< itk::Image<unsigned char, 3> >::Pointer ucharReader = itk::ImageFileReader< itk::Image<unsigned char, 3> >::New();
	  ucharReader->SetImageIO ( io );
	  ucharReader->SetFileName ( paths[0].toAscii().constData() );
	  try {
	    ucharReader->Update();
	  }
	  catch (itk::ExceptionObject &e) {
	    std::cerr << e;
	    return false;
	  }
	  if( dtkAbstractData* dtkdata = this->data() )
	    dtkdata->setData ( ucharReader->GetOutput() );
	  else if (dtkAbstractData* dtkdata = dtkAbstractDataFactory::instance()->create ("itkDataImageUChar3")) {
	    dtkdata->setData ( ucharReader->GetOutput() );
	    this->setData ( dtkdata );
	  }
	  break;
	}
      case itk::ImageIOBase::CHAR:
	{
	  itk::ImageFileReader< itk::Image<char, 3> >::Pointer charReader = itk::ImageFileReader< itk::Image<char, 3> >::New();
	  charReader->SetImageIO ( io );
	  charReader->SetFileName ( paths[0].toAscii().constData() );
	  try {
	    charReader->Update();
	  }
	  catch (itk::ExceptionObject &e) {
	    std::cerr << e;
	    return false;
	  }
	  if( dtkAbstractData* dtkdata = this->data() )
	    dtkdata->setData ( charReader->GetOutput() );
	  else if (dtkAbstractData* dtkdata = dtkAbstractDataFactory::instance()->create ("itkDataImageChar3")) {
	    dtkdata->setData ( charReader->GetOutput() );
	    this->setData ( dtkdata );
	  }
	  break;
	}
      case itk::ImageIOBase::USHORT:
	{
	  itk::ImageFileReader< itk::Image<unsigned short, 3> >::Pointer ushortReader = itk::ImageFileReader< itk::Image<unsigned short, 3> >::New();
	  ushortReader->SetImageIO ( io );
	  ushortReader->SetFileName ( paths[0].toAscii().constData() );
	  try {
	    ushortReader->Update();
	  }
	  catch (itk::ExceptionObject &e) {
	    std::cerr << e;
	    return false;
	  }
	  if( dtkAbstractData* dtkdata = this->data() )
	    dtkdata->setData ( ushortReader->GetOutput() );
	  else if (dtkAbstractData* dtkdata = dtkAbstractDataFactory::instance()->create ("itkDataImageUShort3")) {
	    dtkdata->setData ( ushortReader->GetOutput() );
	    this->setData ( dtkdata );
	  }
	  break;
	}
	case itk::ImageIOBase::SHORT:
	{
	  itk::ImageFileReader< itk::Image<short, 3> >::Pointer shortReader = itk::ImageFileReader< itk::Image<short, 3> >::New();
	  shortReader->SetImageIO ( io );
	  shortReader->SetFileName ( paths[0].toAscii().constData() );
	  try {
	    shortReader->Update();
	  }
	  catch (itk::ExceptionObject &e) {
	    std::cerr << e;
	    return false;
	  }
	  if( dtkAbstractData* dtkdata = this->data() )
	    dtkdata->setData ( shortReader->GetOutput() );
	  else if (dtkAbstractData* dtkdata = dtkAbstractDataFactory::instance()->create ("itkDataImageShort3")) {
	    dtkdata->setData ( shortReader->GetOutput() );
	    this->setData ( dtkdata );
	  }
	  break;
	}
	case itk::ImageIOBase::UINT:
	{
	  itk::ImageFileReader< itk::Image<unsigned int, 3> >::Pointer uintReader = itk::ImageFileReader< itk::Image<unsigned int, 3> >::New();
	  uintReader->SetImageIO ( io );
	  uintReader->SetFileName ( paths[0].toAscii().constData() );
	  try {
	    uintReader->Update();
	  }
	  catch (itk::ExceptionObject &e) {
	    std::cerr << e;
	    return false;
	  }
	  if( dtkAbstractData* dtkdata = this->data() )
	    dtkdata->setData ( uintReader->GetOutput() );
	  else if (dtkAbstractData* dtkdata = dtkAbstractDataFactory::instance()->create ("itkDataImageUInt3")) {
	    dtkdata->setData ( uintReader->GetOutput() );
	    this->setData ( dtkdata );
	  }
	  break;
	}
	case itk::ImageIOBase::INT:
	{
	  itk::ImageFileReader< itk::Image<int, 3> >::Pointer intReader = itk::ImageFileReader< itk::Image<int, 3> >::New();
	  intReader->SetImageIO ( io );
	  intReader->SetFileName ( paths[0].toAscii().constData() );
	  try {
	    intReader->Update();
	  }
	  catch (itk::ExceptionObject &e) {
	    std::cerr << e;
	    return false;
	  }
	  if( dtkAbstractData* dtkdata = this->data() )
	    dtkdata->setData ( intReader->GetOutput() );
	  else if (dtkAbstractData* dtkdata = dtkAbstractDataFactory::instance()->create ("itkDataImageInt3")) {
	    dtkdata->setData ( intReader->GetOutput() );
	    this->setData ( dtkdata );
	  }
	  break;
	}
	case itk::ImageIOBase::ULONG:
	{
	  itk::ImageFileReader< itk::Image<unsigned long, 3> >::Pointer ulongReader = itk::ImageFileReader< itk::Image<unsigned long, 3> >::New();
	  ulongReader->SetImageIO ( io );
	  ulongReader->SetFileName ( paths[0].toAscii().constData() );
	  try {
	    ulongReader->Update();
	  }
	  catch (itk::ExceptionObject &e) {
	    std::cerr << e;
	    return false;
	  }
	  if( dtkAbstractData* dtkdata = this->data() )
	    dtkdata->setData ( ulongReader->GetOutput() );
	  else if (dtkAbstractData* dtkdata = dtkAbstractDataFactory::instance()->create ("itkDataImageULong3")) {
	    dtkdata->setData ( ulongReader->GetOutput() );
	    this->setData ( dtkdata );
	  }
	  break;
	}
	case itk::ImageIOBase::LONG:
	{
	  itk::ImageFileReader< itk::Image<long, 3> >::Pointer longReader = itk::ImageFileReader< itk::Image<long, 3> >::New();
	  longReader->SetImageIO ( io );
	  longReader->SetFileName ( paths[0].toAscii().constData() );
	  try {
	    longReader->Update();
	  }
	  catch (itk::ExceptionObject &e) {
	    std::cerr << e;
	    return false;
	  }
	  if( dtkAbstractData* dtkdata = this->data() )
	    dtkdata->setData ( longReader->GetOutput() );
	  else if (dtkAbstractData* dtkdata = dtkAbstractDataFactory::instance()->create ("itkDataImageLong3")) {
	    dtkdata->setData ( longReader->GetOutput() );
	    this->setData ( dtkdata );
	  }
	  break;
	}
	case itk::ImageIOBase::FLOAT:
	{
	  itk::ImageFileReader< itk::Image<float, 3> >::Pointer floatReader = itk::ImageFileReader< itk::Image<float, 3> >::New();
	  floatReader->SetImageIO ( io );
	  floatReader->SetFileName ( paths[0].toAscii().constData() );
	  try {
	    floatReader->Update();
	  }
	  catch (itk::ExceptionObject &e) {
	    std::cerr << e;
	    return false;
	  }
	  if( dtkAbstractData* dtkdata = this->data() )
	    dtkdata->setData ( floatReader->GetOutput() );
	  else if (dtkAbstractData* dtkdata = dtkAbstractDataFactory::instance()->create ("itkDataImageFloat3")) {
	    dtkdata->setData ( floatReader->GetOutput() );
	    this->setData ( dtkdata );
	  }
	  break;
	}
	case itk::ImageIOBase::DOUBLE:
	{
	  itk::ImageFileReader< itk::Image<double, 3> >::Pointer doubleReader = itk::ImageFileReader< itk::Image<double, 3> >::New();
	  doubleReader->SetImageIO ( io );
	  doubleReader->SetFileName ( paths[0].toAscii().constData() );
	  try {
	    doubleReader->Update();
	  }
	  catch (itk::ExceptionObject &e) {
	    std::cerr << e;
	    return false;
	  }
	  if( dtkAbstractData* dtkdata = this->data() )
	    dtkdata->setData ( doubleReader->GetOutput() );
	  else if (dtkAbstractData* dtkdata = dtkAbstractDataFactory::instance()->create ("itkDataImageDouble3")) {
	    dtkdata->setData ( doubleReader->GetOutput() );
	    this->setData ( dtkdata );
	  }
	  break;
	}
      default:
	{
	  std::cerr << "Unrecognized component type" << std::endl;
	  return false;
	}
  }

  return true;

}

// /////////////////////////////////////////////////////////////////
// Type instanciation
// /////////////////////////////////////////////////////////////////

dtkAbstractDataReader *createItkDCMTKDataImageReader(void)
{
    return new itkDCMTKDataImageReader;
}

