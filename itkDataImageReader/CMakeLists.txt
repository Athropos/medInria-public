## #################################################################
## Generated by dtkPluginGenerator
## #################################################################

cmake_minimum_required(VERSION 2.6)

project(itkDataImageReaderPlugin)

## #################################################################
## Setup version numbering
## #################################################################

set(${PROJECT_NAME}_VERSION_MAJOR 0 CACHE STRING "${PROJECT_NAME} major version number.")
set(${PROJECT_NAME}_VERSION_MINOR 1 CACHE STRING "${PROJECT_NAME} minor version number.")
set(${PROJECT_NAME}_VERSION_BUILD 0 CACHE STRING "${PROJECT_NAME} build version number.")
set(${PROJECT_NAME}_VERSION
  "${${PROJECT_NAME}_VERSION_MAJOR}.${${PROJECT_NAME}_VERSION_MINOR}.${${PROJECT_NAME}_VERSION_BUILD}")

mark_as_advanced(${PROJECT_NAME}_VERSION_MAJOR)
mark_as_advanced(${PROJECT_NAME}_VERSION_MINOR)
mark_as_advanced(${PROJECT_NAME}_VERSION_BUILD)

set(CMAKE_COLOR_MAKEFILE ON)
set(CMAKE_VERBOSE_MAKEFILE OFF)
set(CMAKE_INCLUDE_CURRENT_DIR TRUE)

## #################################################################
## Setup output paths
## #################################################################

if(WIN32)
  set(${PROJECT_NAME}_ARCHIVE_OUTPUT_DIRECTORY lib)
  set(${PROJECT_NAME}_RUNTIME_OUTPUT_DIRECTORY bin)
  set(${PROJECT_NAME}_LIBRARY_OUTPUT_DIRECTORY bin)
else(WIN32)
  set(${PROJECT_NAME}_ARCHIVE_OUTPUT_DIRECTORY lib)
  set(${PROJECT_NAME}_RUNTIME_OUTPUT_DIRECTORY bin)
  set(${PROJECT_NAME}_LIBRARY_OUTPUT_DIRECTORY lib)
endif(WIN32)

set(CMAKE_DEBUG_POSTFIX "d")

set(LIBRARY_OUTPUT_PATH    ${CMAKE_BINARY_DIR}/${${PROJECT_NAME}_LIBRARY_OUTPUT_DIRECTORY})
set(ARCHIVE_OUTPUT_PATH    ${CMAKE_BINARY_DIR}/${${PROJECT_NAME}_ARCHIVE_OUTPUT_DIRECTORY})
set(RUNTIME_OUTPUT_PATH    ${CMAKE_BINARY_DIR}/${${PROJECT_NAME}_RUNTIME_OUTPUT_DIRECTORY})
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/${${PROJECT_NAME}_RUNTIME_OUTPUT_DIRECTORY})

set(${PROJECT_NAME}_INCLUDE_PATH ${CMAKE_SOURCE_DIR}/src)

set(${PROJECT_NAME}_LIBRARY_DIRS ${LIBRARY_OUTPUT_PATH})
set(${PROJECT_NAME}_RUNTIME_DIRS ${RUNTIME_OUTPUT_PATH})

## #################################################################
## Setup CMake Modules
## #################################################################

set(CMAKE_MODULE_PATH
  ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR})

## #################################################################
## Resolve dependencies
## #################################################################

mark_as_advanced(CMAKE_BACKWARDS_COMPATIBILITY)
mark_as_advanced(CMAKE_BUILD_TYPE)
mark_as_advanced(CMAKE_INSTALL_PREFIX)
if(APPLE)
mark_as_advanced(CMAKE_OSX_ARCHITECTURES)
mark_as_advanced(CMAKE_OSX_SYSROOT)
endif(APPLE)

set(QT_USE_QTOPENGL  TRUE)
set(QT_USE_QTXML     TRUE)
set(QT_USE_QTSQL     TRUE)
set(QT_USE_QTHELP    TRUE)
set(QT_USE_QTNETWORK TRUE)
set(QT_USE_QTWEBKIT  TRUE)

find_package(Qt4 REQUIRED)
include(${QT_USE_FILE})

mark_as_advanced(QT_QMAKE_EXECUTABLE)

find_package(dtk REQUIRED)
include(${dtk_USE_FILE})

find_package(ITK REQUIRED)
include(${ITK_USE_FILE})

find_package(DCMTK2 REQUIRED)
include_directories(${DCMTK_INCLUDE_DIR})

find_package(vtkINRIA3D REQUIRED)
include(${vtkINRIA3D_USE_FILE})

find_package(VTK)
include(${VTK_USE_FILE})

include_directories(${CMAKE_SOURCE_DIR}/medItk)


set(ITKDCMTKIO_SOURCES
itkDCMTKImageIO.cxx
)
add_library(ITKDCMTKIO SHARED
${ITKDCMTKIO_SOURCES}
)
target_link_libraries(ITKDCMTKIO
${DCMTK_LIBRARIES}
itkAddOn
${ITK_LIBRARIES}
)


## #################################################################
## Input
## #################################################################

set(${PROJECT_NAME}_HEADERS_MOC
  itkDataImageReaderPlugin.h
  itkDCMTKDataImageReader.h
  itkDataImageReaderBase.h
  itkMetaDataImageReader.h
  itkAnalyzeDataImageReader.h
  itkPNGDataImageReader.h
  itkBMPDataImageReader.h
  itkJPEGDataImageReader.h
  itkTIFFDataImageReader.h
  itkNiftiDataImageReader.h
  itkNrrdDataImageReader.h
  itkGiplDataImageReader.h
  itkVTKDataImageReader.h
)

set(${PROJECT_NAME}_SOURCES
  itkDataImageReaderPlugin.cpp
  itkDataImageReaderCommand.cxx
  itkDataImageReaderBase.cpp
  itkMetaDataImageReader.cpp
  itkDCMTKDataImageReader.cpp
  itkAnalyzeDataImageReader.cpp
  itkPNGDataImageReader.cpp
  itkBMPDataImageReader.cpp
  itkJPEGDataImageReader.cpp
  itkTIFFDataImageReader.cpp
  itkNiftiDataImageReader.cpp
  itkNrrdDataImageReader.cpp
  itkGiplDataImageReader.cpp
  itkVTKDataImageReader.cpp
)

## #################################################################
## Build rules
## #################################################################

add_definitions(${QT_DEFINITIONS})
add_definitions(-DQT_PLUGIN)
add_definitions(-DQT_SHARED)
add_definitions(-DQT_NO_DEBUG)

qt4_wrap_cpp(${PROJECT_NAME}_SOURCES_MOC ${${PROJECT_NAME}_HEADERS_MOC})

add_library(${PROJECT_NAME} SHARED
  ${${PROJECT_NAME}_SOURCES_MOC} 
  ${${PROJECT_NAME}_SOURCES}
)

target_link_libraries(${PROJECT_NAME}
  ${QT_LIBRARIES}
  dtkCore
  ITKDCMTKIO
  medItk
  # itkAddOn  
  ${ITK_LIBRARIES}
)






add_executable(itkDCMTKConvert
  itkDCMTKConvert.cxx
)
  
target_link_libraries(itkDCMTKConvert
  ITKDCMTKIO
  ${ITK_LIBRARIES}
)


add_executable(itkGenerateThumbnails
  itkGenerateThumbnails.cxx
)
  
target_link_libraries(itkGenerateThumbnails
  ${ITK_LIBRARIES}
)


if (VTK_FOUND)

add_executable(itkDCMTKReaderTest
  itkDCMTKReaderTest.cxx
)
  
target_link_libraries(itkDCMTKReaderTest
  vtkRenderingAddOn
  vtkRendering
  vtkIO
  vtkDataManagement
  ITKDCMTKIO
  ${ITK_LIBRARIES}
)

add_executable(itkStreamedReaderTest
  itkStreamedReaderTest.cxx
)
  
target_link_libraries(itkStreamedReaderTest
  vtkRenderingAddOn
  vtkRendering
  vtkIO
  vtkDataManagement
  ${ITK_LIBRARIES}
)

add_executable(itkDCMTKReadWriteBenchmark
  itkDCMTKReadWriteBenchmark.cxx  
)
  
target_link_libraries(itkDCMTKReadWriteBenchmark
  ITKDCMTKIO
  ${ITK_LIBRARIES}
)

endif (VTK_FOUND)

if (BUILD_TESTING)
  add_subdirectory(Testing)
endif (BUILD_TESTING)
