## #################################################################
## Generated by dtkPluginGenerator
## #################################################################

cmake_minimum_required(VERSION 2.8.1)

project(itkDataImageReaderPlugin)

## #################################################################
## Setup version numbering
## #################################################################

set(${PROJECT_NAME}_VERSION_MAJOR 0 CACHE STRING "${PROJECT_NAME} major version number.")
set(${PROJECT_NAME}_VERSION_MINOR 1 CACHE STRING "${PROJECT_NAME} minor version number.")
set(${PROJECT_NAME}_VERSION_BUILD 0 CACHE STRING "${PROJECT_NAME} build version number.")
set(${PROJECT_NAME}_VERSION
  "${${PROJECT_NAME}_VERSION_MAJOR}.${${PROJECT_NAME}_VERSION_MINOR}.${${PROJECT_NAME}_VERSION_BUILD}")

mark_as_advanced(${PROJECT_NAME}_VERSION_MAJOR)
mark_as_advanced(${PROJECT_NAME}_VERSION_MINOR)
mark_as_advanced(${PROJECT_NAME}_VERSION_BUILD)

set(CMAKE_COLOR_MAKEFILE ON)
set(CMAKE_VERBOSE_MAKEFILE OFF)
set(CMAKE_INCLUDE_CURRENT_DIR TRUE)

## #################################################################
## Resolve dependencies
## #################################################################

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR})

find_package(dtk REQUIRED)
include(${dtk_USE_FILE})
include(dtkPlugin)

find_package(ITK REQUIRED)
include(${ITK_USE_FILE})

if(NOT ITK_USE_SYSTEM_GDCM)
  message(FATAL_ERROR "The DICOM GDCM reader plugin needs ITK to compile with SYSTEM_GDCM, please, set the option ITK_USE_SYSTEM_GDCM:ON in ITK and re-compile")
endif(NOT ITK_USE_SYSTEM_GDCM)

find_package(DCMTK2 REQUIRED)
include_directories(${DCMTK_INCLUDE_DIR})

find_package(vtkINRIA3D REQUIRED)
include(${vtkINRIA3D_USE_FILE})

find_package(VTK)
include(${VTK_USE_FILE})

set(ITK_LIB_STYLE "STATIC")
if(ITK_BUILD_SHARED)
set(ITK_LIB_STYLE "SHARED")
endif (ITK_BUILD_SHARED)

set(ITKDCMTKIO_SOURCES
  itkDCMTKImageIO.cxx)

add_library(ITKDCMTKIO ${ITK_LIB_STYLE}
  ${ITKDCMTKIO_SOURCES})

target_link_libraries(ITKDCMTKIO
  ${DCMTK_LIBRARIES}
  itkAddOn
  ${ITK_LIBRARIES})

## #################################################################
## Input
## #################################################################

set(${PROJECT_NAME}_HEADERS_MOC
  itkDataImageReaderPlugin.h
  itkDCMTKDataImageReader.h
  itkGDCMDataImageReader.h
  itkDataImageReaderBase.h
  itkMetaDataImageReader.h
  itkAnalyzeDataImageReader.h
  itkPNGDataImageReader.h
  itkBMPDataImageReader.h
  itkJPEGDataImageReader.h
  itkTIFFDataImageReader.h
  itkNiftiDataImageReader.h
  itkNrrdDataImageReader.h
  itkGiplDataImageReader.h
  itkVTKDataImageReader.h)

set(${PROJECT_NAME}_SOURCES
  itkDataImageReaderPlugin.cpp
  itkDataImageReaderCommand.cxx
  itkDataImageReaderBase.cpp
  itkMetaDataImageReader.cpp
  itkDCMTKDataImageReader.cpp
  itkGDCMDataImageReader.cpp
  itkAnalyzeDataImageReader.cpp
  itkPNGDataImageReader.cpp
  itkBMPDataImageReader.cpp
  itkJPEGDataImageReader.cpp
  itkTIFFDataImageReader.cpp
  itkNiftiDataImageReader.cpp
  itkNrrdDataImageReader.cpp
  itkGiplDataImageReader.cpp
  itkVTKDataImageReader.cpp)

## #################################################################
## Build rules
## #################################################################

qt4_wrap_cpp(${PROJECT_NAME}_SOURCES_MOC ${${PROJECT_NAME}_HEADERS_MOC})

add_library(${PROJECT_NAME} SHARED
  ${${PROJECT_NAME}_SOURCES_MOC} 
  ${${PROJECT_NAME}_SOURCES})

target_link_libraries(${PROJECT_NAME}
  ${QT_LIBRARIES}
  dtkCore
  ITKDCMTKIO
  # medItk
  # itkAddOn  
  ${ITK_LIBRARIES})

add_executable(itkDCMTKConvert
  itkDCMTKConvert.cxx)
  
target_link_libraries(itkDCMTKConvert
  ITKDCMTKIO
  ${ITK_LIBRARIES})

add_executable(itkGenerateThumbnails
  itkGenerateThumbnails.cxx)
  
target_link_libraries(itkGenerateThumbnails
  ${ITK_LIBRARIES})

if(VTK_FOUND)

add_executable(itkDCMTKReaderTest
  itkDCMTKReaderTest.cxx)
  
target_link_libraries(itkDCMTKReaderTest
  vtkRenderingAddOn
  vtkWidgetsAddOn
  vtkWidgets
  vtkRendering
  vtkIO
  vtkDataManagement
  ITKDCMTKIO
  ${ITK_LIBRARIES})

add_executable(itkStreamedReaderTest
  itkStreamedReaderTest.cxx)
  
target_link_libraries(itkStreamedReaderTest
  vtkRenderingAddOn
  vtkWidgetsAddOn
  vtkWidgets
  vtkRendering
  vtkIO
  vtkDataManagement
  ${ITK_LIBRARIES})

add_executable(itkDCMTKReadWriteBenchmark
  itkDCMTKReadWriteBenchmark.cxx)
  
target_link_libraries(itkDCMTKReadWriteBenchmark
  ITKDCMTKIO
  ${ITK_LIBRARIES})

endif (VTK_FOUND)

if (BUILD_TESTING)
  add_subdirectory(Testing)
endif (BUILD_TESTING)

## #################################################################
## Install rules
## #################################################################
if( ITK_BUILD_SHARED )
    install(TARGETS ${PROJECT_NAME}  
    RUNTIME DESTINATION plugins
    LIBRARY DESTINATION plugins
    ARCHIVE DESTINATION plugins)
    install(DIRECTORY ${ITK_LIBRARY_DIRS}/ 
    DESTINATION lib
    FILES_MATCHING PATTERN "lib*")
    install (TARGETS ITKDCMTKIO 
    LIBRARY DESTINATION lib
    )
else( ITK_BUILD_SHARED )
  install(TARGETS ${PROJECT_NAME}
    RUNTIME DESTINATION plugins
    LIBRARY DESTINATION plugins
    ARCHIVE DESTINATION plugins)
endif( ITK_BUILD_SHARED )


