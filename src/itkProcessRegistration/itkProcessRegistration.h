// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#ifndef ITKPROCESSREGISTRATION_H
#define ITKPROCESSREGISTRATION_H

#include <dtkCore/dtkAbstractProcess.h>
#include <itkImage.h>

#include "itkProcessRegistrationExport.h"


class itkProcessRegistrationPrivate;

class ITKPROCESSREGISTRATION_EXPORT itkProcessRegistration : public dtkAbstractProcess
{
    Q_OBJECT

public:
             itkProcessRegistration(void);
    virtual ~itkProcessRegistration(void);

public:
    enum ImageType{
        UCHAR,CHAR,
        USHORT,SHORT,
        UINT,INT,
        ULONG,LONG,
        FLOAT,
        DOUBLE
    };

public:
    int update(void);

    void setInput(dtkAbstractData *data, int channel);
    dtkAbstractData *output(void);

    virtual int update(ImageType);
    itk::ImageBase<3>::Pointer fixedImage();
    itk::ImageBase<3>::Pointer movingImage();
    itkProcessRegistration::ImageType fixedImageType();
    itkProcessRegistration::ImageType movingImageType();

public slots:
    virtual bool write(const QStringList& files);
    virtual bool write(const QString& file);
protected :
    virtual bool writeTransform(const QString& file);

private:
    itkProcessRegistrationPrivate *d;

};

//Implement this function only in actual implementation of registration Plugins
//dtkAbstractProcess *createItkProcessRegistration(void);

#endif
