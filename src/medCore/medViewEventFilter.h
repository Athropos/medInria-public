#ifndef MEDVIEWEVENTFILTER_H
#define MEDVIEWEVENTFILTER_H

// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////


#include <dtkCore/dtkAbstractObject.h>

#include "medCoreExport.h"

//Forward declarations
class medAbstractView;
class medAbstractViewScene;
class medToolBoxSegmentation;

class MEDCORE_EXPORT medViewEventFilter : public dtkAbstractObject
{
    Q_OBJECT;

public:
             medViewEventFilter(dtkAbstractObject * parent = NULL);
    virtual ~medViewEventFilter(void);

    virtual QString description(void) const;

    void installOnView(medAbstractView * view);
    void removeFromView(medAbstractView * view);
    void removeFromAllViews();

protected:
    virtual bool eventFilter(QObject *obj, QEvent *event);

    /** Event handlers, derived classes should override those they need.
     *  \return     true if the event was processed and should not be passed to the next handler.
     *  Provide default implementations which do nothing, returning false. */
    virtual bool mousePressEvent( medAbstractView *view, QGraphicsSceneMouseEvent *mouseEvent );
    virtual bool mouseReleaseEvent( medAbstractView *view, QGraphicsSceneMouseEvent *mouseEvent );
    virtual bool mouseMoveEvent( medAbstractView *view, QGraphicsSceneMouseEvent *mouseEvent );

    virtual bool mousePressEvent( medAbstractView *view, QMouseEvent *mouseEvent );
    virtual bool mouseReleaseEvent( medAbstractView *view, QMouseEvent *mouseEvent );
    virtual bool mouseMoveEvent( medAbstractView *view, QMouseEvent *mouseEvent );

    // Which object to actually filter given the input view.
    static QObject * objectToFilter( medAbstractView * view );

protected slots:
    void onViewDestroyed(QObject*);

private:
    static QString s_description();

    medToolBoxSegmentation * m_segmentationController;
    QSet<medAbstractView *> m_views;
    typedef QHash<QObject *, medAbstractView *> FilterObjToViewType;
    FilterObjToViewType m_filterObjToView;
};

#endif // MEDVIEWEVENTFILTER_H
