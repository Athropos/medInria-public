[projects]
# list of projects to compile (can be dependencies or actual targets)
#projects=cmake,TCLAP,dtk,medinria,itk,vtk,dcmtk,vtkinria3d-public,ttk-public,asclepiospublic,medinria-plugins
#projects=mips,ttk-private,vistal,asclepios-private,qtshanoir,qtdcm,visages-private
projects=

[DEFAULT]
projects_dir=/home/serch/projects
archive_dir=/home/serch/archive
package_dir=/home/serch/installers/ubuntu/
# the following line is no longer used as it was replaced by CPACK_OUTPUT_FILE_PREFIX
extra_package_cmd=

# handy variables to turn on/off script actions
create_dirs=1
update_dirs=1
configure=1
build=1
install=0
package=1
doc=0
test=0

[package_deps]
# adding libpng12-dev (though I cannot remember for which project) and uuid-dev
# and libboost-all-dev and libbz2-dev for vistal
# and libxmu-dev for mips
### when installing again from scratch in the new VM check Ben's comment:
### Tu utilises gmm pour quoi? Si c'est pour les Demons, on utilise trilinos en général, qui est bien plus rapide.
### and libgmm-dev for asclepios-private
# and libopenmpi1.3 and libqt4-sql-sqlite for medinria runtime
deps=git-core wget qt-sdk swig python python-dev tcl tcl-dev tk tk-dev libedit-dev openssl libssl-dev libopenmpi-dev nvidia-settings libwrap0-dev libtiff-dev libpng12-dev uuid-dev libboost-all-dev libbz2-dev libxmu-dev libopenmpi1.3 libqt4-sql-sqlite

# to generate DEB packages
package_manager=apt

# common cmake values. Are prepended to all other cmake configs
[cmake-common]
# apparently by setting the following variable CPack automatically moves the packages after built, need to test still...
CPACK_OUTPUT_FILE_PREFIX:PATH=%(package_dir)s

# we don't want testing, docs or examples
BUILD_TESTING:BOOL=OFF
BUILD_DOXYGEN:BOOL=OFF
BUILD_DOCUMENTATION:BOOL=OFF
BUILD_EXAMPLES:BOOL=OFF

# we want DEBs
CPACK_BINARY_RPM:BOOL=OFF
CPACK_BINARY_DEB:BOOL=ON
CPACK_BINARY_NSIS:BOOL=OFF
CPACK_BINARY_STGZ:BOOL=OFF
CPACK_BINARY_TBZ2:BOOL=OFF
CPACK_BINARY_TGZ:BOOL=OFF
CPACK_BINARY_TZ:BOOL=OFF
CPACK_GENERATOR:STRING=DEB

[vtk]
# corrected path for vtk (though no longer used as of CPACK_OUTPUT_FILE_PREFIX)
#extra_package_cmd=mkdir -p %(package_dir)s && cp _CPack_Packages/Linux-x86_64/DEB/*.deb %(package_dir)s

# the final path where files are installed is given by
# CPACK_PACKAGING_INSTALL_PREFIX / CPACK_PACKAGE_INSTALL_DIRECTORY / files

[ttk-public-cmake]
# we don't want those binaries
TTK_INSTALL_NO_RUNTIME:BOOL=ON

[itk-cmake]
# in itk_src/CMakeLists.txt is specified SET(CPACK_PACKAGE_INSTALL_DIRECTORY "InsightToolkit-${ITK_VERSION_MAJOR}.${ITK_VERSION_MINOR}")
# hence we have /usr/local/inria/InsightToolkit-3.20
CPACK_PACKAGE_INSTALL_DIRECTORY:PATH=
CPACK_PACKAGING_INSTALL_PREFIX:PATH=/usr/local/inria

# copy-pasted from itk CMakeLists.txt:
# ITK_INSTALL_BIN_DIR          - binary dir (executables)
# ITK_INSTALL_LIB_DIR          - library dir (libs)
# ITK_INSTALL_DATA_DIR         - share dir (say, examples, data, etc)
# ITK_INSTALL_INCLUDE_DIR      - include dir (headers)
# ITK_INSTALL_PACKAGE_DIR      - package/export configuration files
# ITK_INSTALL_NO_DEVELOPMENT   - do not install development files
# ITK_INSTALL_NO_RUNTIME       - do not install runtime files
# ITK_INSTALL_NO_DOCUMENTATION - do not install documentation files
ITK_INSTALL_LIB_DIR:PATH=lib
ITK_INSTALL_INCLUDE_DIR:PATH=include
ITK_INSTALL_PACKAGE_DIR:PATH=


[vtk-cmake]
# in vtk_src/VTKCPack.cmake is specified SET(CPACK_PACKAGE_INSTALL_DIRECTORY "VTK ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
# hence we have /usr/local/inria/VTK 5.8.0
CPACK_PACKAGE_INSTALL_DIRECTORY:PATH=
CPACK_PACKAGING_INSTALL_PREFIX:PATH=/usr/local/inria

# check vtk CMakeLists.txt for more info on these
VTK_INSTALL_ROOT:PATH=
VTK_INSTALL_INCLUDE_DIR:PATH=include
VTK_INSTALL_LIB_DIR:PATH=lib
