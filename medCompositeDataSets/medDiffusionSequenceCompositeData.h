// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#ifndef DIFFUSIONSEQUENCECOMPOSITEDATA_H
#define DIFFUSIONSEQUENCECOMPOSITEDATA_H

#include <dtkCore/dtkAbstractData.h>
#include <medCompositeDataSetsPluginExport.h>
#include <medCompositeDataSetsBase.h>
#include <itkGradientFileReader.h>

template <typename T,unsigned N>
struct DebugWrapper: public T {
    static unsigned num;
    DebugWrapper(): T(),id(num++) { qDebug() << "Constructor" << id; }
    ~DebugWrapper() { qDebug() << "Destructor" << id; }

    using T::operator=;

    unsigned id;
};

template <typename T,unsigned N>
unsigned DebugWrapper<T,N>::num = N;

class medDiffusionSequenceCompositeDataToolBox;

class MEDCOMPOSITEDATASETSPLUGIN_EXPORT medDiffusionSequenceCompositeData: public MedInria::medCompositeDataSetsBase {

    typedef itk::GradientFileReader            GradientReaderType;
    typedef GradientReaderType::VectorType     GradientType;
    typedef GradientReaderType::VectorListType GradientListType;
    typedef QVector<dtkAbstractData*>          Volumes;

public:

    friend class medDiffusionSequenceCompositeDataToolBox;

    medDiffusionSequenceCompositeData(): MedInria::medCompositeDataSetsBase(Tag,this),major_vers(defaultMajorVersion),minor_vers(defaultMinorVersion) { }
    virtual ~medDiffusionSequenceCompositeData() { }

    virtual QString description() const;

    virtual bool has_version(const unsigned major,const unsigned minor) const { return major==defaultMajorVersion; }

    virtual MedInria::medCompositeDataSetsBase* clone(const int major,const int minor) const {
        const unsigned maj_version = (major==-1) ? defaultMajorVersion : major;
        const unsigned min_version = (minor==-1) ? defaultMinorVersion : minor;
        return new medDiffusionSequenceCompositeData(maj_version,min_version);
    }

    virtual QString tag()     const { return Tag;                                                         }
    virtual QString version() const { return QString::number(major_vers)+"."+QString::number(minor_vers); }

    bool registered() const;

    virtual bool read_description(const QByteArray& buf);
    virtual bool read_data(const QString&);

    virtual bool write_description(QTextStream& file);
    virtual bool write_data(const QString&);

    //  Methods specific to this type.

    void readVolumes(const QString& dirname,const QStringList& paths);
    void writeVolumes(const QString& dirname,const QStringList& paths) const;

    void setGradientList(const GradientListType& grads) { gradients = grads; }
    void setVolumeList(const Volumes& vols)             { images = vols;     }

private:

    medDiffusionSequenceCompositeData(const unsigned major,const unsigned minor): MedInria::medCompositeDataSetsBase(Tag,this),major_vers(major),minor_vers(minor) { }

    const unsigned   major_vers;
    const unsigned   minor_vers;
    DebugWrapper<QStringList,0>      image_list;
    DebugWrapper<Volumes,1000>          images;
    DebugWrapper<GradientListType,10000> gradients;

    static const medDiffusionSequenceCompositeData proto;

    static const char     Tag[];
    static const unsigned defaultMajorVersion = 1;
    static const unsigned defaultMinorVersion = 0;
};

dtkAbstractData* createDiffusionSequenceCompositeData();

#endif
