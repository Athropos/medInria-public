// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#ifndef DIFFUSIONSEQUENCECOMPOSITEDATA_H
#define DIFFUSIONSEQUENCECOMPOSITEDATA_H

#include <dtkCore/dtkAbstractData.h>
#include <medCompositeDataSetsPluginExport.h>
#include <medCompositeDataSetsBase.h>
#include <itkGradientFileReader.h>

//class medDiffusionSequenceCompositeDataPrivate;

class MEDCOMPOSITEDATASETSPLUGIN_EXPORT medDiffusionSequenceCompositeData: public MedInria::medCompositeDataSetsBase {
public:

    medDiffusionSequenceCompositeData(): MedInria::medCompositeDataSetsBase("DWI",this),version(0) { }
    virtual ~medDiffusionSequenceCompositeData() { }

    virtual QString description(void) const;

    virtual bool has_version(const unsigned num) const { return num==1; }

    virtual MedInria::medCompositeDataSetsBase* clone(const unsigned v) const {
        return new medDiffusionSequenceCompositeData(v);
    }

    static bool registered(void);

    virtual void read_description(const QByteArray& buf);

    void readVolumes(QStringList);

private:

    medDiffusionSequenceCompositeData(const unsigned v): MedInria::medCompositeDataSetsBase("DWI",this), version(v) { }

    typedef itk::GradientFileReader GradientReaderType;
    typedef GradientReaderType::VectorType GradientType;
    typedef GradientReaderType::VectorListType GradientListType;

    const unsigned            version;
    QVector<dtkAbstractData*> images;
    QStringList               image_list;
    GradientListType          gradients;
};

dtkAbstractData* createDiffusionSequenceCompositeData();

#endif
