// /////////////////////////////////////////////////////////////////
// Generated by medPluginGenerator
// /////////////////////////////////////////////////////////////////

#include <sstream>

#include <DiffusionSequenceCompositeData.h>
#include <dtkCore/dtkAbstractDataFactory.h>

#include <IOUtils.H>

// /////////////////////////////////////////////////////////////////
// DiffusionSequenceCompositeData
// /////////////////////////////////////////////////////////////////

bool DiffusionSequenceCompositeData::registered(void)
{
    return dtkAbstractDataFactory::instance()->registerDataType("DiffusionSequenceCompositeData", createDiffusionSequenceCompositeData);
}

QString DiffusionSequenceCompositeData::description(void) const
{
    return "DiffusionSequenceCompositeData";
}

void DiffusionSequenceCompositeData::read_description(const QByteArray& buf) {
    const std::string description(buf.data());
    std::istringstream iss(description);

    unsigned num;
    iss >> io_utils::skip_comments('#') >> io_utils::match("Images") >> num;
    for (unsigned i=0;i<num;++i) {
        std::string name;
        Vector3D V;
        iss >> io_utils::skip_comments('#') >> io_utils::filename(name) >> io_utils::match('[') >> V[0] >> V[1] >> V[2] >> io_utils::match(']');

        std::cerr << name << '(' << V << ')' << std::endl;
    }
}

// /////////////////////////////////////////////////////////////////
// Type instantiation
// /////////////////////////////////////////////////////////////////

dtkAbstractData* createDiffusionSequenceCompositeData()
{
    return new DiffusionSequenceCompositeData;
}
