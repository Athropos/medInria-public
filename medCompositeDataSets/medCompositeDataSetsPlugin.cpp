// /////////////////////////////////////////////////////////////////
// Generated by medPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "medDiffusionSequenceCompositeData.h"
#include "medCompositeDataSetsPlugin.h"
#include "medDiffusionSequenceCompositeDataToolBox.h"

#include <dtkCore/dtkLog.h>

// /////////////////////////////////////////////////////////////////
// medCompositeDataSetsPluginPrivate
//
// This class is where all data specific to the plugin and that should
// be hidden from the outside world should go. The content of this class
// is totally free.
// /////////////////////////////////////////////////////////////////

class medCompositeDataSetsPluginPrivate 
{
public:
    // Class variables go here.
};

// /////////////////////////////////////////////////////////////////
// medCompositeDataSetsPlugin
// /////////////////////////////////////////////////////////////////

//  Plugin construction.
//  Allocate private data here (see class %1PluginPrivate).

medCompositeDataSetsPlugin::medCompositeDataSetsPlugin(QObject *parent) : dtkPlugin(parent), d(new medCompositeDataSetsPluginPrivate)
{

}

//  Plugin destruction.
//  Free all members allocated in the constructor.

medCompositeDataSetsPlugin::~medCompositeDataSetsPlugin(void)
{
    delete d;

    d = NULL;
}

//  Initialization of the plugin.

bool medCompositeDataSetsPlugin::initialize(void)
{
    if(!medDiffusionSequenceCompositeData::registered())
        dtkWarning() << "Unable to register medCompositeDataSets type";
    if(!medDiffusionSequenceCompositeDataToolBox::registered())
        dtkWarning() << "Unable to register medDiffusionSequenceCompositeData toolbox";

    return true;
}

//  Unitialize the plugin.
//  If some private data are allocated in the initialize method
//  free them here.

bool medCompositeDataSetsPlugin::uninitialize(void)
{
    return true;
}

//  Name of the plugin.

QString medCompositeDataSetsPlugin::name(void) const
{
    return "medCompositeDataSetsPlugin";
}

//  Description of the plugin.

QString medCompositeDataSetsPlugin::description(void) const
{
    return "Manager for composite data types that associate multiple data files (meshes, images, ...) and some meta data as a single medINRIA type.";
}

//  Tags to appear in the tag cloud.

QStringList medCompositeDataSetsPlugin::tags(void) const
{
    return QStringList() << "composite data sets" << "metadata" << "archive";
}

//  Names of the types handled by the plugin.

QStringList medCompositeDataSetsPlugin::types(void) const
{
    QStringList ql;
    if(medDiffusionSequenceCompositeData::registered())
        ql << "Diffusion Sequence";
    return ql;
}

Q_EXPORT_PLUGIN2(medCompositeDataSetsPlugin, medCompositeDataSetsPlugin)
